{
    "layout": {
        "layoutAttributes": {
            "plot_bgcolor": {
                "valType": "color",
                "dflt": "#fff",
                "description": "Sets the color of plotting area in-between x and y axes.",
                "role": "style"
            },
            "hidesources": {
                "valType": "boolean",
                "dflt": false,
                "description": "Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the plotly service (at https://plot.ly or on-premise).",
                "role": "info"
            },
            "autosize": {
                "valType": "boolean",
                "dflt": false,
                "description": "Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.",
                "role": "info"
            },
            "calendar": {
                "valType": "enumerated",
                "dflt": "gregorian",
                "description": "Sets the default calendar system to use for interpreting and displaying dates throughout the plot.",
                "values": [
                    "gregorian",
                    "chinese",
                    "coptic",
                    "discworld",
                    "ethiopian",
                    "hebrew",
                    "islamic",
                    "julian",
                    "mayan",
                    "nanakshahi",
                    "nepali",
                    "persian",
                    "jalali",
                    "taiwan",
                    "thai",
                    "ummalqura"
                ],
                "role": "info"
            },
            "annotations": {
                "items": {
                    "annotation": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of the border enclosing the annotation `text`.",
                            "role": "style"
                        },
                        "text": {
                            "valType": "string",
                            "description": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.",
                            "role": "info"
                        },
                        "yshift": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.",
                            "role": "style"
                        },
                        "ay": {
                            "valType": "any",
                            "description": "Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is an axis, this is an absolute value on that axis, like `y`, NOT a relative value.",
                            "role": "info"
                        },
                        "xshift": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.",
                            "role": "style"
                        },
                        "standoff": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets a distance, in pixels, to move the arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.",
                            "role": "style",
                            "min": 0
                        },
                        "ayref": {
                            "valType": "enumerated",
                            "dflt": "pixel",
                            "description": "Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ay` is a relative offset in pixels  from `y`. If set to a y axis id (e.g. *y* or *y2*), `ay` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed.",
                            "values": [
                                "pixel",
                                "/^y([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "xref": {
                            "valType": "enumerated",
                            "description": "Sets the annotation's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where 0 (1) corresponds to the left (right) side.",
                            "values": [
                                "paper",
                                "/^x([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "hovertext": {
                            "valType": "string",
                            "description": "Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.",
                            "role": "info"
                        },
                        "width": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.",
                            "role": "style",
                            "min": 1
                        },
                        "yref": {
                            "valType": "enumerated",
                            "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where 0 (1) corresponds to the bottom (top).",
                            "values": [
                                "paper",
                                "/^y([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "auto",
                            "description": "Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.",
                            "values": [
                                "auto",
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "info"
                        },
                        "showarrow": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.",
                            "role": "style"
                        },
                        "arrowwidth": {
                            "valType": "number",
                            "description": "Sets the width (in px) of annotation arrow.",
                            "role": "style",
                            "min": 0.1
                        },
                        "arrowsize": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the size (in px) of annotation arrow head.",
                            "role": "style",
                            "min": 0.3
                        },
                        "visible": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not this annotation is visible.",
                            "role": "info"
                        },
                        "arrowcolor": {
                            "valType": "color",
                            "description": "Sets the color of the annotation arrow.",
                            "role": "style"
                        },
                        "borderpad": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the padding (in px) between the `text` and the enclosing border.",
                            "role": "style",
                            "min": 0
                        },
                        "opacity": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the opacity of the annotation (text + arrow).",
                            "max": 1,
                            "role": "style"
                        },
                        "hoverlabel": {
                            "bordercolor": {
                                "valType": "color",
                                "description": "Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.",
                                "role": "style"
                            },
                            "bgcolor": {
                                "valType": "color",
                                "description": "Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.",
                                "role": "style"
                            },
                            "font": {
                                "color": {
                                    "valType": "color",
                                    "role": "style"
                                },
                                "description": "Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.",
                                "family": {
                                    "valType": "string",
                                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                    "strict": true,
                                    "noBlank": true,
                                    "role": "style"
                                },
                                "role": "object",
                                "size": {
                                    "valType": "number",
                                    "min": 1,
                                    "role": "style"
                                }
                            },
                            "role": "object"
                        },
                        "yclick": {
                            "valType": "any",
                            "description": "Toggle this annotation when clicking a data point whose `y` value is `yclick` rather than the annotation's `y` value.",
                            "role": "info"
                        },
                        "axref": {
                            "valType": "enumerated",
                            "dflt": "pixel",
                            "description": "Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ax` is a relative offset in pixels  from `x`. If set to an x axis id (e.g. *x* or *x2*), `ax` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed.",
                            "values": [
                                "pixel",
                                "/^x([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "x": {
                            "valType": "any",
                            "description": "Sets the annotation's x position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "info"
                        },
                        "font": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the annotation text font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "textangle": {
                            "valType": "angle",
                            "dflt": 0,
                            "description": "Sets the angle at which the `text` is drawn with respect to the horizontal.",
                            "role": "style"
                        },
                        "valign": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the border enclosing the annotation `text`.",
                            "role": "style",
                            "min": 0
                        },
                        "xclick": {
                            "valType": "any",
                            "description": "Toggle this annotation when clicking a data point whose `x` value is `xclick` rather than the annotation's `x` value.",
                            "role": "info"
                        },
                        "align": {
                            "valType": "enumerated",
                            "dflt": "center",
                            "description": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "role": "object",
                        "captureevents": {
                            "valType": "boolean",
                            "description": "Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.",
                            "role": "info"
                        },
                        "arrowhead": {
                            "min": 0,
                            "valType": "integer",
                            "dflt": 1,
                            "description": "Sets the annotation arrow head style.",
                            "max": 8,
                            "role": "style"
                        },
                        "_deprecated": {
                            "ref": {
                                "valType": "string",
                                "description": "Obsolete. Set `xref` and `yref` separately instead.",
                                "role": "info"
                            }
                        },
                        "clicktoshow": {
                            "valType": "enumerated",
                            "dflt": false,
                            "description": "Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the `x` and `y` values of this annotation, and it is hidden (visible: false), it will appear. In *onoff* mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In *onout* mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different `x` or `y` values, you can set `xclick` and/or `yclick`. This is useful for example to label the side of a bar. To label markers though, `standoff` is preferred over `xclick` and `yclick`.",
                            "values": [
                                false,
                                "onoff",
                                "onout"
                            ],
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "auto",
                            "description": "Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.",
                            "values": [
                                "auto",
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "info"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the background color of the annotation.",
                            "role": "style"
                        },
                        "y": {
                            "valType": "any",
                            "description": "Sets the annotation's y position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "info"
                        },
                        "ax": {
                            "valType": "any",
                            "description": "Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from right to left (left to right). If `axref` is an axis, this is an absolute value on that axis, like `x`, NOT a relative value.",
                            "role": "info"
                        },
                        "height": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.",
                            "role": "style",
                            "min": 1
                        }
                    }
                },
                "role": "object"
            },
            "sliders": {
                "items": {
                    "slider": {
                        "pad": {
                            "r": {
                                "valType": "number",
                                "dflt": 0,
                                "description": "The amount of padding (in px) on the right side of the component.",
                                "role": "style"
                            },
                            "l": {
                                "valType": "number",
                                "dflt": 0,
                                "description": "The amount of padding (in px) on the left side of the component.",
                                "role": "style"
                            },
                            "b": {
                                "valType": "number",
                                "dflt": 0,
                                "description": "The amount of padding (in px) along the bottom of the component.",
                                "role": "style"
                            },
                            "t": {
                                "valType": "number",
                                "dflt": 20,
                                "description": "The amount of padding (in px) along the top of the component.",
                                "role": "style"
                            },
                            "description": "Set the padding of the slider component along each side.",
                            "role": "object"
                        },
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#bec8d9",
                            "description": "Sets the color of the border enclosing the slider.",
                            "role": "style"
                        },
                        "minorticklen": {
                            "valType": "number",
                            "dflt": 4,
                            "description": "Sets the length in pixels of minor step tick marks",
                            "role": "style",
                            "min": 0
                        },
                        "transition": {
                            "easing": {
                                "valType": "enumerated",
                                "dflt": "cubic-in-out",
                                "description": "Sets the easing function of the slider transition",
                                "values": [
                                    "linear",
                                    "quad",
                                    "cubic",
                                    "sin",
                                    "exp",
                                    "circle",
                                    "elastic",
                                    "back",
                                    "bounce",
                                    "linear-in",
                                    "quad-in",
                                    "cubic-in",
                                    "sin-in",
                                    "exp-in",
                                    "circle-in",
                                    "elastic-in",
                                    "back-in",
                                    "bounce-in",
                                    "linear-out",
                                    "quad-out",
                                    "cubic-out",
                                    "sin-out",
                                    "exp-out",
                                    "circle-out",
                                    "elastic-out",
                                    "back-out",
                                    "bounce-out",
                                    "linear-in-out",
                                    "quad-in-out",
                                    "cubic-in-out",
                                    "sin-in-out",
                                    "exp-in-out",
                                    "circle-in-out",
                                    "elastic-in-out",
                                    "back-in-out",
                                    "bounce-in-out"
                                ],
                                "role": "info"
                            },
                            "role": "object",
                            "duration": {
                                "valType": "number",
                                "dflt": 150,
                                "description": "Sets the duration of the slider transition",
                                "min": 0,
                                "role": "info"
                            }
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets the slider's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
                            "values": [
                                "auto",
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "info"
                        },
                        "steps": {
                            "items": {
                                "step": {
                                    "value": {
                                        "valType": "string",
                                        "description": "Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided.",
                                        "role": "info"
                                    },
                                    "label": {
                                        "valType": "string",
                                        "description": "Sets the text label to appear on the slider",
                                        "role": "info"
                                    },
                                    "method": {
                                        "valType": "enumerated",
                                        "dflt": "restyle",
                                        "description": "Sets the Plotly method to be called when the slider value is changed.",
                                        "values": [
                                            "restyle",
                                            "relayout",
                                            "animate",
                                            "update"
                                        ],
                                        "role": "info"
                                    },
                                    "role": "object",
                                    "args": {
                                        "valType": "info_array",
                                        "items": [
                                            {
                                                "valType": "any"
                                            },
                                            {
                                                "valType": "any"
                                            },
                                            {
                                                "valType": "any"
                                            }
                                        ],
                                        "description": "Sets the arguments values to be passed to the Plotly method set in `method` on slide.",
                                        "freeLength": true,
                                        "role": "info"
                                    }
                                }
                            },
                            "role": "object"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 7,
                            "description": "Sets the length in pixels of step tick marks",
                            "role": "style",
                            "min": 0
                        },
                        "active": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Determines which button (by index starting from 0) is considered active.",
                            "min": 0,
                            "role": "info"
                        },
                        "activebgcolor": {
                            "valType": "color",
                            "dflt": "#dbdde0",
                            "description": "Sets the background color of the slider grip while dragging.",
                            "role": "style"
                        },
                        "font": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the font of the slider step labels.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the x position (in normalized coordinates) of the slider.",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this slider length is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the border enclosing the slider.",
                            "role": "style",
                            "min": 0
                        },
                        "visible": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the slider is visible.",
                            "role": "info"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#333",
                            "description": "Sets the color of the border enclosing the slider.",
                            "role": "style"
                        },
                        "currentvalue": {
                            "xanchor": {
                                "valType": "enumerated",
                                "dflt": "left",
                                "description": "The alignment of the value readout relative to the length of the slider.",
                                "values": [
                                    "left",
                                    "center",
                                    "right"
                                ],
                                "role": "info"
                            },
                            "suffix": {
                                "valType": "string",
                                "description": "When currentvalue.visible is true, this sets the suffix of the label.",
                                "role": "info"
                            },
                            "offset": {
                                "valType": "number",
                                "dflt": 10,
                                "description": "The amount of space, in pixels, between the current value label and the slider.",
                                "role": "info"
                            },
                            "visible": {
                                "valType": "boolean",
                                "dflt": true,
                                "description": "Shows the currently-selected value above the slider.",
                                "role": "info"
                            },
                            "prefix": {
                                "valType": "string",
                                "description": "When currentvalue.visible is true, this sets the prefix of the label.",
                                "role": "info"
                            },
                            "role": "object",
                            "font": {
                                "color": {
                                    "valType": "color",
                                    "role": "style"
                                },
                                "description": "Sets the font of the current value label text.",
                                "family": {
                                    "valType": "string",
                                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                    "strict": true,
                                    "noBlank": true,
                                    "role": "style"
                                },
                                "role": "object",
                                "size": {
                                    "valType": "number",
                                    "min": 1,
                                    "role": "style"
                                }
                            }
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "#f8fafc",
                            "description": "Sets the background color of the slider.",
                            "role": "style"
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the y position (in normalized coordinates) of the slider.",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Sets the slider's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
                            "values": [
                                "auto",
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "info"
                        }
                    }
                },
                "role": "object"
            },
            "showlegend": {
                "valType": "boolean",
                "description": "Determines whether or not a legend is drawn.",
                "role": "info"
            },
            "title": {
                "valType": "string",
                "dflt": "Click to enter Plot title",
                "description": "Sets the plot's title.",
                "role": "info"
            },
            "width": {
                "valType": "number",
                "dflt": 700,
                "description": "Sets the plot's width (in px).",
                "min": 10,
                "role": "info"
            },
            "scene": {
                "xaxis": {
                    "showspikes": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
                        "role": "info"
                    },
                    "categoryarray": {
                        "valType": "data_array",
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "role": "data"
                    },
                    "showbackground": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not this axis' wall has a background color.",
                        "role": "info"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "autorange": {
                        "valType": "enumerated",
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "role": "style"
                    },
                    "zerolinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the zero line.",
                        "role": "style"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "rgb(204, 204, 204)",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "categoryorder": {
                        "valType": "enumerated",
                        "dflt": "trace",
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "categoryarraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "role": "info"
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "showaxeslabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not this axis is labeled",
                        "role": "info"
                    },
                    "backgroundcolor": {
                        "valType": "color",
                        "dflt": "rgba(204, 204, 204, 0.5)",
                        "description": "Sets the background color of this axis' wall.",
                        "role": "style"
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
                        "role": "info"
                    },
                    "zeroline": {
                        "valType": "boolean",
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                        "role": "style"
                    },
                    "spikesides": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
                        "role": "info"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "mirror": {
                        "valType": "enumerated",
                        "dflt": false,
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "zerolinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the line color of the zero line.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "hoverformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "type": {
                        "valType": "enumerated",
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "rangemode": {
                        "valType": "enumerated",
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "spikecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the color of the spikes.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "any"
                            },
                            {
                                "valType": "any"
                            }
                        ],
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "info"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "spikethickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the spikes.",
                        "min": 0,
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "calendar": {
                        "valType": "enumerated",
                        "dflt": "gregorian",
                        "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
                        "values": [
                            "gregorian",
                            "chinese",
                            "coptic",
                            "discworld",
                            "ethiopian",
                            "hebrew",
                            "islamic",
                            "julian",
                            "mayan",
                            "nanakshahi",
                            "nepali",
                            "persian",
                            "jalali",
                            "taiwan",
                            "thai",
                            "ummalqura"
                        ],
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    }
                },
                "domain": {
                    "y": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the vertical domain of this scene (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    },
                    "role": "object",
                    "x": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the horizontal domain of this scene (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    }
                },
                "yaxis": {
                    "showspikes": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
                        "role": "info"
                    },
                    "categoryarray": {
                        "valType": "data_array",
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "role": "data"
                    },
                    "showbackground": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not this axis' wall has a background color.",
                        "role": "info"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "autorange": {
                        "valType": "enumerated",
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "role": "style"
                    },
                    "zerolinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the zero line.",
                        "role": "style"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "rgb(204, 204, 204)",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "categoryorder": {
                        "valType": "enumerated",
                        "dflt": "trace",
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "categoryarraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "role": "info"
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "showaxeslabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not this axis is labeled",
                        "role": "info"
                    },
                    "backgroundcolor": {
                        "valType": "color",
                        "dflt": "rgba(204, 204, 204, 0.5)",
                        "description": "Sets the background color of this axis' wall.",
                        "role": "style"
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
                        "role": "info"
                    },
                    "zeroline": {
                        "valType": "boolean",
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                        "role": "style"
                    },
                    "spikesides": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
                        "role": "info"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "mirror": {
                        "valType": "enumerated",
                        "dflt": false,
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "zerolinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the line color of the zero line.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "hoverformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "type": {
                        "valType": "enumerated",
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "rangemode": {
                        "valType": "enumerated",
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "spikecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the color of the spikes.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "any"
                            },
                            {
                                "valType": "any"
                            }
                        ],
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "info"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "spikethickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the spikes.",
                        "min": 0,
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "calendar": {
                        "valType": "enumerated",
                        "dflt": "gregorian",
                        "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
                        "values": [
                            "gregorian",
                            "chinese",
                            "coptic",
                            "discworld",
                            "ethiopian",
                            "hebrew",
                            "islamic",
                            "julian",
                            "mayan",
                            "nanakshahi",
                            "nepali",
                            "persian",
                            "jalali",
                            "taiwan",
                            "thai",
                            "ummalqura"
                        ],
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    }
                },
                "dragmode": {
                    "valType": "enumerated",
                    "dflt": "turntable",
                    "description": "Determines the mode of drag interactions for this scene.",
                    "values": [
                        "orbit",
                        "turntable",
                        "zoom",
                        "pan",
                        false
                    ],
                    "role": "info"
                },
                "_deprecated": {
                    "cameraposition": {
                        "valType": "info_array",
                        "description": "Obsolete. Use `camera` instead.",
                        "role": "info"
                    }
                },
                "aspectratio": {
                    "description": "Sets this scene's axis aspectratio.",
                    "z": {
                        "valType": "number",
                        "min": 0,
                        "role": "info"
                    },
                    "y": {
                        "valType": "number",
                        "min": 0,
                        "role": "info"
                    },
                    "role": "object",
                    "x": {
                        "valType": "number",
                        "min": 0,
                        "role": "info"
                    }
                },
                "zaxis": {
                    "showspikes": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
                        "role": "info"
                    },
                    "categoryarray": {
                        "valType": "data_array",
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "role": "data"
                    },
                    "showbackground": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not this axis' wall has a background color.",
                        "role": "info"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "autorange": {
                        "valType": "enumerated",
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "role": "style"
                    },
                    "zerolinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the zero line.",
                        "role": "style"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "rgb(204, 204, 204)",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "categoryorder": {
                        "valType": "enumerated",
                        "dflt": "trace",
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "categoryarraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "role": "info"
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "showaxeslabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not this axis is labeled",
                        "role": "info"
                    },
                    "backgroundcolor": {
                        "valType": "color",
                        "dflt": "rgba(204, 204, 204, 0.5)",
                        "description": "Sets the background color of this axis' wall.",
                        "role": "style"
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
                        "role": "info"
                    },
                    "zeroline": {
                        "valType": "boolean",
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                        "role": "style"
                    },
                    "spikesides": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
                        "role": "info"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "mirror": {
                        "valType": "enumerated",
                        "dflt": false,
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "zerolinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the line color of the zero line.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "hoverformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "type": {
                        "valType": "enumerated",
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "rangemode": {
                        "valType": "enumerated",
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "spikecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the color of the spikes.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "any"
                            },
                            {
                                "valType": "any"
                            }
                        ],
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "info"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "spikethickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the spikes.",
                        "min": 0,
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "calendar": {
                        "valType": "enumerated",
                        "dflt": "gregorian",
                        "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
                        "values": [
                            "gregorian",
                            "chinese",
                            "coptic",
                            "discworld",
                            "ethiopian",
                            "hebrew",
                            "islamic",
                            "julian",
                            "mayan",
                            "nanakshahi",
                            "nepali",
                            "persian",
                            "jalali",
                            "taiwan",
                            "thai",
                            "ummalqura"
                        ],
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    }
                },
                "role": "object",
                "hovermode": {
                    "valType": "enumerated",
                    "dflt": "closest",
                    "description": "Determines the mode of hover interactions for this scene.",
                    "values": [
                        "closest",
                        false
                    ],
                    "role": "info"
                },
                "_isSubplotObj": true,
                "bgcolor": {
                    "valType": "color",
                    "dflt": "rgba(0,0,0,0)",
                    "role": "style"
                },
                "aspectmode": {
                    "valType": "enumerated",
                    "dflt": "auto",
                    "description": "If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.",
                    "values": [
                        "auto",
                        "cube",
                        "data",
                        "manual"
                    ],
                    "role": "info"
                },
                "camera": {
                    "up": {
                        "description": "Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.",
                        "z": {
                            "valType": "number",
                            "dflt": 1,
                            "role": "info"
                        },
                        "y": {
                            "valType": "number",
                            "dflt": 0,
                            "role": "info"
                        },
                        "role": "object",
                        "x": {
                            "valType": "number",
                            "dflt": 0,
                            "role": "info"
                        }
                    },
                    "eye": {
                        "description": "Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.",
                        "z": {
                            "valType": "number",
                            "dflt": 1.25,
                            "role": "info"
                        },
                        "y": {
                            "valType": "number",
                            "dflt": 1.25,
                            "role": "info"
                        },
                        "role": "object",
                        "x": {
                            "valType": "number",
                            "dflt": 1.25,
                            "role": "info"
                        }
                    },
                    "center": {
                        "description": "Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.",
                        "z": {
                            "valType": "number",
                            "dflt": 0,
                            "role": "info"
                        },
                        "y": {
                            "valType": "number",
                            "dflt": 0,
                            "role": "info"
                        },
                        "role": "object",
                        "x": {
                            "valType": "number",
                            "dflt": 0,
                            "role": "info"
                        }
                    },
                    "role": "object"
                }
            },
            "orientation": {
                "valType": "angle",
                "description": "For polar plots only. Rotates the entire polar by the given angle.",
                "role": "info"
            },
            "radialaxis": {
                "domain": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        },
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        }
                    ],
                    "description": "Polar chart subplots are not supported yet. This key has currently no effect.",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ]
                },
                "endpadding": {
                    "valType": "number",
                    "role": "style"
                },
                "visible": {
                    "valType": "boolean",
                    "description": "Determines whether or not this axis will be visible.",
                    "role": "info"
                },
                "showline": {
                    "valType": "boolean",
                    "description": "Determines whether or not the line bounding this radial axis will be shown on the figure.",
                    "role": "style"
                },
                "ticksuffix": {
                    "valType": "string",
                    "description": "Sets the length of the tick lines on this radial axis.",
                    "role": "style"
                },
                "role": "object",
                "ticklen": {
                    "valType": "number",
                    "description": "Sets the length of the tick lines on this radial axis.",
                    "role": "style",
                    "min": 0
                },
                "tickcolor": {
                    "valType": "color",
                    "description": "Sets the color of the tick lines on this radial axis.",
                    "role": "style"
                },
                "range": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "number"
                        },
                        {
                            "valType": "number"
                        }
                    ],
                    "description": "Defines the start and end point of this radial axis.",
                    "role": "info"
                },
                "tickorientation": {
                    "valType": "enumerated",
                    "description": "Sets the orientation (from the paper perspective) of the radial axis tick labels.",
                    "values": [
                        "horizontal",
                        "vertical"
                    ],
                    "role": "style"
                },
                "orientation": {
                    "valType": "number",
                    "description": "Sets the orientation (an angle with respect to the origin) of the radial axis.",
                    "role": "style"
                },
                "showticklabels": {
                    "valType": "boolean",
                    "description": "Determines whether or not the radial axis ticks will feature tick labels.",
                    "role": "style"
                }
            },
            "direction": {
                "valType": "enumerated",
                "description": "For polar plots only. Sets the direction corresponding to positive angles.",
                "values": [
                    "clockwise",
                    "counterclockwise"
                ],
                "role": "info"
            },
            "height": {
                "valType": "number",
                "dflt": 450,
                "description": "Sets the plot's height (in px).",
                "min": 10,
                "role": "info"
            },
            "xaxis": {
                "showspikes": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest",
                    "role": "style"
                },
                "categoryarray": {
                    "valType": "data_array",
                    "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                    "role": "data"
                },
                "tickfont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets the tick font.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "autorange": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                    "values": [
                        true,
                        false,
                        "reversed"
                    ],
                    "role": "style"
                },
                "gridcolor": {
                    "valType": "color",
                    "dflt": "#eee",
                    "description": "Sets the color of the grid lines.",
                    "role": "style"
                },
                "scaleratio": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.",
                    "role": "info",
                    "min": 0
                },
                "anchor": {
                    "valType": "enumerated",
                    "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ],
                    "role": "info"
                },
                "tickangle": {
                    "valType": "angle",
                    "dflt": "auto",
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                    "role": "style"
                },
                "linewidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the axis line.",
                    "role": "style",
                    "min": 0
                },
                "categoryorder": {
                    "valType": "enumerated",
                    "dflt": "trace",
                    "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                    "values": [
                        "trace",
                        "category ascending",
                        "category descending",
                        "array"
                    ],
                    "role": "info"
                },
                "tickvalssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  tickvals .",
                    "role": "info"
                },
                "categoryarraysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  categoryarray .",
                    "role": "info"
                },
                "spikemode": {
                    "valType": "flaglist",
                    "dflt": "toaxis",
                    "flags": [
                        "toaxis",
                        "across",
                        "marker"
                    ],
                    "description": "Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on",
                    "role": "style"
                },
                "showticklabels": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the tick labels are drawn.",
                    "role": "style"
                },
                "_isSubplotObj": true,
                "overlaying": {
                    "valType": "enumerated",
                    "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes.",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ],
                    "role": "info"
                },
                "titlefont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets this axis' title font.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "gridwidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the grid lines.",
                    "role": "style",
                    "min": 0
                },
                "visible": {
                    "valType": "boolean",
                    "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
                    "role": "info"
                },
                "zeroline": {
                    "valType": "boolean",
                    "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                    "role": "style"
                },
                "tickprefix": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets a tick label prefix.",
                    "role": "style"
                },
                "mirror": {
                    "valType": "enumerated",
                    "dflt": false,
                    "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                    "values": [
                        true,
                        "ticks",
                        false,
                        "all",
                        "allticks"
                    ],
                    "role": "style"
                },
                "dtick": {
                    "valType": "any",
                    "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                    "role": "style"
                },
                "ticksuffix": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets a tick label suffix.",
                    "role": "style"
                },
                "role": "object",
                "exponentformat": {
                    "valType": "enumerated",
                    "dflt": "B",
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                    "values": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ],
                    "role": "style"
                },
                "tickwidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the tick width (in px).",
                    "role": "style",
                    "min": 0
                },
                "showline": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not a line bounding this axis is drawn.",
                    "role": "style"
                },
                "linecolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the axis line color.",
                    "role": "style"
                },
                "fixedrange": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                    "role": "info"
                },
                "color": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                    "role": "style"
                },
                "showticksuffix": {
                    "valType": "enumerated",
                    "dflt": "all",
                    "description": "Same as `showtickprefix` but for tick suffixes.",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "role": "style"
                },
                "zerolinecolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the line color of the zero line.",
                    "role": "style"
                },
                "showgrid": {
                    "valType": "boolean",
                    "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                    "role": "style"
                },
                "hoverformat": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                    "role": "style"
                },
                "type": {
                    "valType": "enumerated",
                    "dflt": "-",
                    "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                    "values": [
                        "-",
                        "linear",
                        "log",
                        "date",
                        "category"
                    ],
                    "role": "info"
                },
                "side": {
                    "valType": "enumerated",
                    "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
                    "values": [
                        "top",
                        "bottom",
                        "left",
                        "right"
                    ],
                    "role": "info"
                },
                "ticktextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  ticktext .",
                    "role": "info"
                },
                "_deprecated": {
                    "autotick": {
                        "valType": "boolean",
                        "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*.",
                        "role": "info"
                    }
                },
                "showexponent": {
                    "valType": "enumerated",
                    "dflt": "all",
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "role": "style"
                },
                "ticktext": {
                    "valType": "data_array",
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                    "role": "data"
                },
                "zerolinewidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the zero line.",
                    "role": "style"
                },
                "title": {
                    "valType": "string",
                    "description": "Sets the title of this axis.",
                    "role": "info"
                },
                "tick0": {
                    "valType": "any",
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                    "role": "style"
                },
                "tickvals": {
                    "valType": "data_array",
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                    "role": "data"
                },
                "separatethousands": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "If \"true\", even 4-digit integers are separated",
                    "role": "style"
                },
                "spikecolor": {
                    "valType": "color",
                    "dflt": null,
                    "description": "Sets the spike color. If undefined, will use the series color",
                    "role": "style"
                },
                "nticks": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                    "role": "style",
                    "min": 0
                },
                "range": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "any"
                        },
                        {
                            "valType": "any"
                        }
                    ],
                    "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                    "role": "info"
                },
                "rangemode": {
                    "valType": "enumerated",
                    "dflt": "normal",
                    "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                    "values": [
                        "normal",
                        "tozero",
                        "nonnegative"
                    ],
                    "role": "style"
                },
                "spikedash": {
                    "valType": "string",
                    "dflt": "dash",
                    "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                    "values": [
                        "solid",
                        "dot",
                        "dash",
                        "longdash",
                        "dashdot",
                        "longdashdot"
                    ],
                    "role": "style"
                },
                "rangeslider": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the border color of the range slider.",
                        "role": "style"
                    },
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "any"
                            },
                            {
                                "valType": "any"
                            }
                        ],
                        "description": "Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "info"
                    },
                    "thickness": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.15,
                        "description": "The height of the range slider as a fraction of the total plot area height.",
                        "max": 1,
                        "role": "style"
                    },
                    "autorange": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to *false*.",
                        "role": "style"
                    },
                    "borderwidth": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Sets the border color of the range slider.",
                        "role": "style",
                        "min": 0
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "#fff",
                        "description": "Sets the background color of the range slider.",
                        "role": "style"
                    },
                    "visible": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`",
                        "role": "info"
                    },
                    "role": "object"
                },
                "spikethickness": {
                    "valType": "number",
                    "dflt": 3,
                    "description": "Sets the width (in px) of the zero line.",
                    "role": "style"
                },
                "showtickprefix": {
                    "valType": "enumerated",
                    "dflt": "all",
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "role": "style"
                },
                "scaleanchor": {
                    "valType": "enumerated",
                    "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding opposite-letter axis. such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. Autorange will also expand about the midpoints to satisfy the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`.",
                    "values": [
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ],
                    "role": "info"
                },
                "calendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "domain": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        },
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        }
                    ],
                    "description": "Sets the domain of this axis (in plot fraction).",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ]
                },
                "ticklen": {
                    "valType": "number",
                    "dflt": 5,
                    "description": "Sets the tick length (in px).",
                    "role": "style",
                    "min": 0
                },
                "rangeselector": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the color of the border enclosing the range selector.",
                        "role": "style"
                    },
                    "font": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the font of the range selector button text.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "x": {
                        "valType": "number",
                        "description": "Sets the x position (in normalized coordinates) of the range selector.",
                        "max": 3,
                        "role": "style",
                        "min": -2
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) of the border enclosing the range selector.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.",
                        "role": "info"
                    },
                    "activecolor": {
                        "valType": "color",
                        "description": "Sets the background color of the active range selector button.",
                        "role": "style"
                    },
                    "role": "object",
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
                        "values": [
                            "auto",
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "info"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the background color of the range selector buttons.",
                        "role": "style"
                    },
                    "buttons": {
                        "items": {
                            "button": {
                                "count": {
                                    "valType": "number",
                                    "dflt": 1,
                                    "description": "Sets the number of steps to take to update the range. Use with `step` to specify the update interval.",
                                    "min": 0,
                                    "role": "info"
                                },
                                "role": "object",
                                "stepmode": {
                                    "valType": "enumerated",
                                    "dflt": "backward",
                                    "description": "Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year. Month and year *todate* are currently available only for the built-in (Gregorian) calendar.",
                                    "values": [
                                        "backward",
                                        "todate"
                                    ],
                                    "role": "info"
                                },
                                "description": "Sets the specifications for each buttons. By default, a range selector comes with no buttons.",
                                "label": {
                                    "valType": "string",
                                    "description": "Sets the text label to appear on the button.",
                                    "role": "info"
                                },
                                "step": {
                                    "valType": "enumerated",
                                    "dflt": "month",
                                    "description": "The unit of measurement that the `count` value will set the range by.",
                                    "values": [
                                        "month",
                                        "year",
                                        "day",
                                        "hour",
                                        "minute",
                                        "second",
                                        "all"
                                    ],
                                    "role": "info"
                                }
                            }
                        },
                        "role": "object"
                    },
                    "y": {
                        "valType": "number",
                        "description": "Sets the y position (in normalized coordinates) of the range selector.",
                        "max": 3,
                        "role": "style",
                        "min": -2
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "bottom",
                        "description": "Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
                        "values": [
                            "auto",
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "info"
                    }
                },
                "tickcolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the tick color.",
                    "role": "style"
                },
                "tickmode": {
                    "valType": "enumerated",
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                    "values": [
                        "auto",
                        "linear",
                        "array"
                    ],
                    "role": "info"
                },
                "tickformat": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                    "role": "style"
                },
                "ticks": {
                    "valType": "enumerated",
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                    "values": [
                        "outside",
                        "inside",
                        ""
                    ],
                    "role": "style"
                },
                "position": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
                    "max": 1,
                    "role": "style"
                }
            },
            "angularaxis": {
                "domain": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        },
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        }
                    ],
                    "description": "Polar chart subplots are not supported yet. This key has currently no effect.",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ]
                },
                "range": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "number",
                            "dflt": 0
                        },
                        {
                            "valType": "number",
                            "dflt": 360
                        }
                    ],
                    "description": "Defines the start and end point of this angular axis.",
                    "role": "info"
                },
                "endpadding": {
                    "valType": "number",
                    "role": "style"
                },
                "tickcolor": {
                    "valType": "color",
                    "description": "Sets the color of the tick lines on this angular axis.",
                    "role": "style"
                },
                "showline": {
                    "valType": "boolean",
                    "description": "Determines whether or not the line bounding this angular axis will be shown on the figure.",
                    "role": "style"
                },
                "tickorientation": {
                    "valType": "enumerated",
                    "description": "Sets the orientation (from the paper perspective) of the angular axis tick labels.",
                    "values": [
                        "horizontal",
                        "vertical"
                    ],
                    "role": "style"
                },
                "visible": {
                    "valType": "boolean",
                    "description": "Determines whether or not this axis will be visible.",
                    "role": "info"
                },
                "showticklabels": {
                    "valType": "boolean",
                    "description": "Determines whether or not the angular axis ticks will feature tick labels.",
                    "role": "style"
                },
                "ticksuffix": {
                    "valType": "string",
                    "description": "Sets the length of the tick lines on this angular axis.",
                    "role": "style"
                },
                "role": "object",
                "ticklen": {
                    "valType": "number",
                    "description": "Sets the length of the tick lines on this angular axis.",
                    "role": "style",
                    "min": 0
                }
            },
            "ternary": {
                "domain": {
                    "y": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the vertical domain of this subplot (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    },
                    "role": "object",
                    "x": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the horizontal domain of this subplot (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    }
                },
                "_isSubplotObj": true,
                "sum": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "The number each triplet should sum to, and the maximum range of each axis",
                    "min": 0,
                    "role": "info"
                },
                "baxis": {
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "min": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
                        "min": 0,
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 6,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 1
                    },
                    "hoverformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    }
                },
                "bgcolor": {
                    "valType": "color",
                    "dflt": "#fff",
                    "description": "Set the background color of the subplot",
                    "role": "style"
                },
                "aaxis": {
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "min": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
                        "min": 0,
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 6,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 1
                    },
                    "hoverformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    }
                },
                "caxis": {
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "min": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
                        "min": 0,
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 6,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 1
                    },
                    "hoverformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    }
                },
                "role": "object"
            },
            "images": {
                "items": {
                    "image": {
                        "layer": {
                            "valType": "enumerated",
                            "dflt": "above",
                            "description": "Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.",
                            "values": [
                                "below",
                                "above"
                            ],
                            "role": "info"
                        },
                        "xref": {
                            "valType": "enumerated",
                            "dflt": "paper",
                            "description": "Sets the images's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to an x data coordinate If set to *paper*, the `x` position refers to the distance from the left of plot in normalized coordinates where *0* (*1*) corresponds to the left (right).",
                            "values": [
                                "paper",
                                "/^x([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "source": {
                            "valType": "string",
                            "description": "Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute.",
                            "role": "info"
                        },
                        "x": {
                            "valType": "any",
                            "dflt": 0,
                            "description": "Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info",
                            "role": "info"
                        },
                        "yref": {
                            "valType": "enumerated",
                            "dflt": "paper",
                            "description": "Sets the images's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y data coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plot in normalized coordinates where *0* (*1*) corresponds to the bottom (top).",
                            "values": [
                                "paper",
                                "/^y([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "y": {
                            "valType": "any",
                            "dflt": 0,
                            "description": "Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info",
                            "role": "info"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets the anchor for the x position",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "info"
                        },
                        "sizey": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height.",
                            "role": "info"
                        },
                        "sizex": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width.",
                            "role": "info"
                        },
                        "role": "object",
                        "visible": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not this image is visible.",
                            "role": "info"
                        },
                        "opacity": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the opacity of the image.",
                            "max": 1,
                            "role": "info"
                        },
                        "sizing": {
                            "valType": "enumerated",
                            "dflt": "contain",
                            "description": "Specifies which dimension of the image to constrain.",
                            "values": [
                                "fill",
                                "contain",
                                "stretch"
                            ],
                            "role": "info"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Sets the anchor for the y position.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "info"
                        }
                    }
                },
                "role": "object"
            },
            "yaxis": {
                "showspikes": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest",
                    "role": "style"
                },
                "categoryarray": {
                    "valType": "data_array",
                    "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                    "role": "data"
                },
                "tickfont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets the tick font.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "autorange": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                    "values": [
                        true,
                        false,
                        "reversed"
                    ],
                    "role": "style"
                },
                "gridcolor": {
                    "valType": "color",
                    "dflt": "#eee",
                    "description": "Sets the color of the grid lines.",
                    "role": "style"
                },
                "scaleratio": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.",
                    "role": "info",
                    "min": 0
                },
                "anchor": {
                    "valType": "enumerated",
                    "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ],
                    "role": "info"
                },
                "tickangle": {
                    "valType": "angle",
                    "dflt": "auto",
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                    "role": "style"
                },
                "linewidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the axis line.",
                    "role": "style",
                    "min": 0
                },
                "categoryorder": {
                    "valType": "enumerated",
                    "dflt": "trace",
                    "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                    "values": [
                        "trace",
                        "category ascending",
                        "category descending",
                        "array"
                    ],
                    "role": "info"
                },
                "tickvalssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  tickvals .",
                    "role": "info"
                },
                "categoryarraysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  categoryarray .",
                    "role": "info"
                },
                "spikemode": {
                    "valType": "flaglist",
                    "dflt": "toaxis",
                    "flags": [
                        "toaxis",
                        "across",
                        "marker"
                    ],
                    "description": "Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on",
                    "role": "style"
                },
                "showticklabels": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the tick labels are drawn.",
                    "role": "style"
                },
                "_isSubplotObj": true,
                "overlaying": {
                    "valType": "enumerated",
                    "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes.",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ],
                    "role": "info"
                },
                "titlefont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets this axis' title font.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "gridwidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the grid lines.",
                    "role": "style",
                    "min": 0
                },
                "visible": {
                    "valType": "boolean",
                    "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
                    "role": "info"
                },
                "zeroline": {
                    "valType": "boolean",
                    "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                    "role": "style"
                },
                "tickprefix": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets a tick label prefix.",
                    "role": "style"
                },
                "mirror": {
                    "valType": "enumerated",
                    "dflt": false,
                    "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                    "values": [
                        true,
                        "ticks",
                        false,
                        "all",
                        "allticks"
                    ],
                    "role": "style"
                },
                "dtick": {
                    "valType": "any",
                    "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                    "role": "style"
                },
                "ticksuffix": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets a tick label suffix.",
                    "role": "style"
                },
                "role": "object",
                "exponentformat": {
                    "valType": "enumerated",
                    "dflt": "B",
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                    "values": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ],
                    "role": "style"
                },
                "tickwidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the tick width (in px).",
                    "role": "style",
                    "min": 0
                },
                "showline": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not a line bounding this axis is drawn.",
                    "role": "style"
                },
                "linecolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the axis line color.",
                    "role": "style"
                },
                "fixedrange": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                    "role": "info"
                },
                "color": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                    "role": "style"
                },
                "showticksuffix": {
                    "valType": "enumerated",
                    "dflt": "all",
                    "description": "Same as `showtickprefix` but for tick suffixes.",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "role": "style"
                },
                "zerolinecolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the line color of the zero line.",
                    "role": "style"
                },
                "showgrid": {
                    "valType": "boolean",
                    "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                    "role": "style"
                },
                "hoverformat": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                    "role": "style"
                },
                "type": {
                    "valType": "enumerated",
                    "dflt": "-",
                    "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                    "values": [
                        "-",
                        "linear",
                        "log",
                        "date",
                        "category"
                    ],
                    "role": "info"
                },
                "side": {
                    "valType": "enumerated",
                    "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
                    "values": [
                        "top",
                        "bottom",
                        "left",
                        "right"
                    ],
                    "role": "info"
                },
                "ticktextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  ticktext .",
                    "role": "info"
                },
                "_deprecated": {
                    "autotick": {
                        "valType": "boolean",
                        "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*.",
                        "role": "info"
                    }
                },
                "showexponent": {
                    "valType": "enumerated",
                    "dflt": "all",
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "role": "style"
                },
                "ticktext": {
                    "valType": "data_array",
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                    "role": "data"
                },
                "zerolinewidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the zero line.",
                    "role": "style"
                },
                "title": {
                    "valType": "string",
                    "description": "Sets the title of this axis.",
                    "role": "info"
                },
                "tick0": {
                    "valType": "any",
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                    "role": "style"
                },
                "tickvals": {
                    "valType": "data_array",
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                    "role": "data"
                },
                "separatethousands": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "If \"true\", even 4-digit integers are separated",
                    "role": "style"
                },
                "spikecolor": {
                    "valType": "color",
                    "dflt": null,
                    "description": "Sets the spike color. If undefined, will use the series color",
                    "role": "style"
                },
                "nticks": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                    "role": "style",
                    "min": 0
                },
                "range": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "any"
                        },
                        {
                            "valType": "any"
                        }
                    ],
                    "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                    "role": "info"
                },
                "rangemode": {
                    "valType": "enumerated",
                    "dflt": "normal",
                    "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                    "values": [
                        "normal",
                        "tozero",
                        "nonnegative"
                    ],
                    "role": "style"
                },
                "spikedash": {
                    "valType": "string",
                    "dflt": "dash",
                    "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                    "values": [
                        "solid",
                        "dot",
                        "dash",
                        "longdash",
                        "dashdot",
                        "longdashdot"
                    ],
                    "role": "style"
                },
                "spikethickness": {
                    "valType": "number",
                    "dflt": 3,
                    "description": "Sets the width (in px) of the zero line.",
                    "role": "style"
                },
                "showtickprefix": {
                    "valType": "enumerated",
                    "dflt": "all",
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "role": "style"
                },
                "scaleanchor": {
                    "valType": "enumerated",
                    "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding opposite-letter axis. such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. Autorange will also expand about the midpoints to satisfy the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`.",
                    "values": [
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ],
                    "role": "info"
                },
                "calendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "domain": {
                    "valType": "info_array",
                    "items": [
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        },
                        {
                            "valType": "number",
                            "max": 1,
                            "min": 0
                        }
                    ],
                    "description": "Sets the domain of this axis (in plot fraction).",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ]
                },
                "ticklen": {
                    "valType": "number",
                    "dflt": 5,
                    "description": "Sets the tick length (in px).",
                    "role": "style",
                    "min": 0
                },
                "tickcolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the tick color.",
                    "role": "style"
                },
                "tickmode": {
                    "valType": "enumerated",
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                    "values": [
                        "auto",
                        "linear",
                        "array"
                    ],
                    "role": "info"
                },
                "tickformat": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                    "role": "style"
                },
                "ticks": {
                    "valType": "enumerated",
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                    "values": [
                        "outside",
                        "inside",
                        ""
                    ],
                    "role": "style"
                },
                "position": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
                    "max": 1,
                    "role": "style"
                }
            },
            "dragmode": {
                "valType": "enumerated",
                "dflt": "zoom",
                "description": "Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.",
                "values": [
                    "zoom",
                    "pan",
                    "select",
                    "lasso",
                    "orbit",
                    "turntable"
                ],
                "role": "info"
            },
            "font": {
                "color": {
                    "valType": "color",
                    "dflt": "#444",
                    "role": "style"
                },
                "description": "Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.",
                "family": {
                    "noBlank": true,
                    "valType": "string",
                    "dflt": "\"Open Sans\", verdana, arial, sans-serif",
                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                    "strict": true,
                    "role": "style"
                },
                "role": "object",
                "size": {
                    "valType": "number",
                    "dflt": 12,
                    "min": 1,
                    "role": "style"
                }
            },
            "paper_bgcolor": {
                "valType": "color",
                "dflt": "#fff",
                "description": "Sets the color of paper where the graph is drawn.",
                "role": "style"
            },
            "shapes": {
                "items": {
                    "shape": {
                        "type": {
                            "valType": "enumerated",
                            "description": "Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) If *path*, draw a custom SVG path using `path`.",
                            "values": [
                                "circle",
                                "rect",
                                "path",
                                "line"
                            ],
                            "role": "info"
                        },
                        "role": "object",
                        "visible": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not this shape is visible.",
                            "role": "info"
                        },
                        "xref": {
                            "valType": "enumerated",
                            "description": "Sets the shape's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right) side. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, then you must convert the date to unix time in milliseconds.",
                            "values": [
                                "paper",
                                "/^x([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "y0": {
                            "valType": "any",
                            "description": "Sets the shape's starting y position. See `type` for more info.",
                            "role": "info"
                        },
                        "yref": {
                            "valType": "enumerated",
                            "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top).",
                            "values": [
                                "paper",
                                "/^y([2-9]|[1-9][0-9]+)?$/"
                            ],
                            "role": "info"
                        },
                        "layer": {
                            "valType": "enumerated",
                            "dflt": "above",
                            "description": "Specifies whether shapes are drawn below or above traces.",
                            "values": [
                                "below",
                                "above"
                            ],
                            "role": "info"
                        },
                        "x0": {
                            "valType": "any",
                            "description": "Sets the shape's starting x position. See `type` for more info.",
                            "role": "info"
                        },
                        "x1": {
                            "valType": "any",
                            "description": "Sets the shape's end x position. See `type` for more info.",
                            "role": "info"
                        },
                        "line": {
                            "color": {
                                "valType": "color",
                                "description": "Sets the line color.",
                                "role": "style"
                            },
                            "width": {
                                "valType": "number",
                                "dflt": 2,
                                "description": "Sets the line width (in px).",
                                "role": "style",
                                "min": 0
                            },
                            "role": "object",
                            "dash": {
                                "valType": "string",
                                "dflt": "solid",
                                "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                                "values": [
                                    "solid",
                                    "dot",
                                    "dash",
                                    "longdash",
                                    "dashdot",
                                    "longdashdot"
                                ],
                                "role": "style"
                            }
                        },
                        "y1": {
                            "valType": "any",
                            "description": "Sets the shape's end y position. See `type` for more info.",
                            "role": "info"
                        },
                        "opacity": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the opacity of the shape.",
                            "max": 1,
                            "role": "info"
                        },
                        "fillcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color filling the shape's interior.",
                            "role": "info"
                        },
                        "path": {
                            "valType": "string",
                            "description": "For `type` *path* - a valid SVG path but with the pixel values replaced by data values. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789",
                            "role": "info"
                        }
                    }
                },
                "role": "object"
            },
            "separators": {
                "valType": "string",
                "dflt": ".,",
                "description": "Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands.",
                "role": "style"
            },
            "hovermode": {
                "valType": "enumerated",
                "description": "Determines the mode of hover interactions.",
                "values": [
                    "x",
                    "y",
                    "closest",
                    false
                ],
                "role": "info"
            },
            "mapbox": {
                "_arrayAttrRegexps": [
                    {}
                ],
                "domain": {
                    "y": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the vertical domain of this subplot (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    },
                    "role": "object",
                    "x": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the horizontal domain of this subplot (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    }
                },
                "accesstoken": {
                    "valType": "string",
                    "description": "Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`.",
                    "strict": true,
                    "noBlank": true,
                    "role": "info"
                },
                "zoom": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the zoom level of the map.",
                    "role": "info"
                },
                "style": {
                    "valType": "any",
                    "dflt": "basic",
                    "description": "Sets the Mapbox map style. Either input one of the default Mapbox style names or the URL to a custom style or a valid Mapbox style JSON.",
                    "values": [
                        "basic",
                        "streets",
                        "outdoors",
                        "light",
                        "dark",
                        "satellite",
                        "satellite-streets"
                    ],
                    "role": "style"
                },
                "bearing": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the bearing angle of the map (in degrees counter-clockwise from North).",
                    "role": "info"
                },
                "pitch": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map).",
                    "role": "info"
                },
                "center": {
                    "lon": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the longitude of the center of the map (in degrees East).",
                        "role": "info"
                    },
                    "lat": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the latitude of the center of the map (in degrees North).",
                        "role": "info"
                    },
                    "role": "object"
                },
                "layers": {
                    "items": {
                        "layer": {
                            "type": {
                                "valType": "enumerated",
                                "dflt": "circle",
                                "description": "Sets the layer type. Support for *raster*, *background* types is coming soon. Note that *line* and *fill* are not compatible with Point GeoJSON geometries.",
                                "values": [
                                    "circle",
                                    "line",
                                    "fill",
                                    "symbol"
                                ],
                                "role": "info"
                            },
                            "line": {
                                "width": {
                                    "valType": "number",
                                    "dflt": 2,
                                    "description": "Sets the line width. Has an effect only when `type` is set to *line*.",
                                    "role": "style"
                                },
                                "role": "object"
                            },
                            "circle": {
                                "role": "object",
                                "radius": {
                                    "valType": "number",
                                    "dflt": 15,
                                    "description": "Sets the circle radius. Has an effect only when `type` is set to *circle*.",
                                    "role": "style"
                                }
                            },
                            "source": {
                                "valType": "any",
                                "description": "Sets the source data for this layer. Source can be either a URL, a geojson object (with `sourcetype` set to *geojson*) or an array of tile URLS (with `sourcetype` set to *vector*).",
                                "role": "info"
                            },
                            "below": {
                                "valType": "string",
                                "dflt": "",
                                "description": "Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.",
                                "role": "info"
                            },
                            "role": "object",
                            "symbol": {
                                "text": {
                                    "valType": "string",
                                    "dflt": "",
                                    "description": "Sets the symbol text.",
                                    "role": "info"
                                },
                                "textposition": {
                                    "arrayOk": false,
                                    "valType": "enumerated",
                                    "dflt": "middle center",
                                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                                    "values": [
                                        "top left",
                                        "top center",
                                        "top right",
                                        "middle left",
                                        "middle center",
                                        "middle right",
                                        "bottom left",
                                        "bottom center",
                                        "bottom right"
                                    ],
                                    "role": "style"
                                },
                                "textfont": {
                                    "color": {
                                        "valType": "color",
                                        "role": "style"
                                    },
                                    "description": "Sets the icon text font. Has an effect only when `type` is set to *symbol*.",
                                    "family": {
                                        "noBlank": true,
                                        "valType": "string",
                                        "dflt": "Open Sans Regular, Arial Unicode MS Regular",
                                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                        "strict": true,
                                        "role": "style"
                                    },
                                    "role": "object",
                                    "size": {
                                        "valType": "number",
                                        "min": 1,
                                        "role": "style"
                                    }
                                },
                                "iconsize": {
                                    "valType": "number",
                                    "dflt": 10,
                                    "description": "Sets the symbol icon size. Has an effect only when `type` is set to *symbol*.",
                                    "role": "style"
                                },
                                "role": "object",
                                "icon": {
                                    "valType": "string",
                                    "dflt": "marker",
                                    "description": "Sets the symbol icon image. Full list: https://www.mapbox.com/maki-icons/",
                                    "role": "style"
                                }
                            },
                            "sourcelayer": {
                                "valType": "string",
                                "dflt": "",
                                "description": "Specifies the layer to use from a vector tile source. Required for *vector* source type that supports multiple layers.",
                                "role": "info"
                            },
                            "fill": {
                                "outlinecolor": {
                                    "valType": "color",
                                    "dflt": "#444",
                                    "description": "Sets the fill outline color. Has an effect only when `type` is set to *fill*.",
                                    "role": "style"
                                },
                                "role": "object"
                            },
                            "sourcetype": {
                                "valType": "enumerated",
                                "dflt": "geojson",
                                "description": "Sets the source type for this layer. Support for *raster*, *image* and *video* source types is coming soon.",
                                "values": [
                                    "geojson",
                                    "vector"
                                ],
                                "role": "info"
                            },
                            "color": {
                                "valType": "color",
                                "dflt": "#444",
                                "description": "Sets the primary layer color. If `type` is *circle*, color corresponds to the circle color If `type` is *line*, color corresponds to the line color If `type` is *fill*, color corresponds to the fill color If `type` is *symbol*, color corresponds to the icon color",
                                "role": "style"
                            },
                            "opacity": {
                                "min": 0,
                                "valType": "number",
                                "dflt": 1,
                                "description": "Sets the opacity of the layer.",
                                "max": 1,
                                "role": "info"
                            }
                        }
                    },
                    "role": "object"
                },
                "_isSubplotObj": true,
                "role": "object"
            },
            "legend": {
                "bordercolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the color of the border enclosing the legend.",
                    "role": "style"
                },
                "font": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets the font used to text the legend items.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "x": {
                    "min": -2,
                    "valType": "number",
                    "dflt": 1.02,
                    "description": "Sets the x position (in normalized coordinates) of the legend.",
                    "max": 3,
                    "role": "style"
                },
                "borderwidth": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the width (in px) of the border enclosing the legend.",
                    "role": "style",
                    "min": 0
                },
                "role": "object",
                "orientation": {
                    "valType": "enumerated",
                    "dflt": "v",
                    "description": "Sets the orientation of the legend.",
                    "values": [
                        "v",
                        "h"
                    ],
                    "role": "info"
                },
                "xanchor": {
                    "valType": "enumerated",
                    "dflt": "left",
                    "description": "Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend.",
                    "values": [
                        "auto",
                        "left",
                        "center",
                        "right"
                    ],
                    "role": "info"
                },
                "traceorder": {
                    "valType": "flaglist",
                    "flags": [
                        "reversed",
                        "grouped"
                    ],
                    "extras": [
                        "normal"
                    ],
                    "description": "Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.",
                    "role": "style"
                },
                "tracegroupgap": {
                    "valType": "number",
                    "dflt": 10,
                    "description": "Sets the amount of vertical space (in px) between legend groups.",
                    "role": "style",
                    "min": 0
                },
                "bgcolor": {
                    "valType": "color",
                    "description": "Sets the legend background color.",
                    "role": "style"
                },
                "y": {
                    "min": -2,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y position (in normalized coordinates) of the legend.",
                    "max": 3,
                    "role": "style"
                },
                "yanchor": {
                    "valType": "enumerated",
                    "dflt": "auto",
                    "description": "Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend.",
                    "values": [
                        "auto",
                        "top",
                        "middle",
                        "bottom"
                    ],
                    "role": "info"
                }
            },
            "geo": {
                "domain": {
                    "y": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the vertical domain of this map (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    },
                    "role": "object",
                    "x": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the horizontal domain of this map (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    }
                },
                "showocean": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not oceans are filled in color.",
                    "role": "info"
                },
                "scope": {
                    "valType": "enumerated",
                    "dflt": "world",
                    "description": "Set the scope of the map.",
                    "values": [
                        "world",
                        "usa",
                        "europe",
                        "asia",
                        "africa",
                        "north america",
                        "south america"
                    ],
                    "role": "info"
                },
                "lakecolor": {
                    "valType": "color",
                    "dflt": "#3399FF",
                    "description": "Sets the color of the lakes.",
                    "role": "style"
                },
                "projection": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Sets the projection type.",
                        "values": [
                            "equirectangular",
                            "mercator",
                            "orthographic",
                            "natural earth",
                            "kavrayskiy7",
                            "miller",
                            "robinson",
                            "eckert4",
                            "azimuthal equal area",
                            "azimuthal equidistant",
                            "conic equal area",
                            "conic conformal",
                            "conic equidistant",
                            "gnomonic",
                            "stereographic",
                            "mollweide",
                            "hammer",
                            "transverse mercator",
                            "albers usa",
                            "winkel tripel",
                            "aitoff",
                            "sinusoidal"
                        ],
                        "role": "info"
                    },
                    "parallels": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ],
                        "description": "For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.",
                        "role": "info"
                    },
                    "rotation": {
                        "roll": {
                            "valType": "number",
                            "description": "Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down.",
                            "role": "info"
                        },
                        "lon": {
                            "valType": "number",
                            "description": "Rotates the map along parallels (in degrees East).",
                            "role": "info"
                        },
                        "lat": {
                            "valType": "number",
                            "description": "Rotates the map along meridians (in degrees North).",
                            "role": "info"
                        },
                        "role": "object"
                    },
                    "role": "object",
                    "scale": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Zooms in or out on the map view.",
                        "max": 10,
                        "role": "info"
                    }
                },
                "lataxis": {
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ],
                        "description": "Sets the range of this axis (in degrees).",
                        "role": "info"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the graticule's stroke color.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not graticule are shown on the map.",
                        "role": "info"
                    },
                    "dtick": {
                        "valType": "number",
                        "description": "Sets the graticule's longitude/latitude tick step.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "number",
                        "description": "Sets the graticule's starting tick longitude/latitude.",
                        "role": "info"
                    },
                    "role": "object",
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the graticule's stroke width (in px).",
                        "min": 0,
                        "role": "style"
                    }
                },
                "countrycolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets line color of the country boundaries.",
                    "role": "style"
                },
                "lonaxis": {
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ],
                        "description": "Sets the range of this axis (in degrees).",
                        "role": "info"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the graticule's stroke color.",
                        "role": "style"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not graticule are shown on the map.",
                        "role": "info"
                    },
                    "dtick": {
                        "valType": "number",
                        "description": "Sets the graticule's longitude/latitude tick step.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "number",
                        "description": "Sets the graticule's starting tick longitude/latitude.",
                        "role": "info"
                    },
                    "role": "object",
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the graticule's stroke width (in px).",
                        "min": 0,
                        "role": "style"
                    }
                },
                "riverwidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the stroke width (in px) of the rivers.",
                    "min": 0,
                    "role": "style"
                },
                "showcountries": {
                    "valType": "boolean",
                    "description": "Sets whether or not country boundaries are drawn.",
                    "role": "info"
                },
                "showcoastlines": {
                    "valType": "boolean",
                    "description": "Sets whether or not the coastlines are drawn.",
                    "role": "info"
                },
                "showsubunits": {
                    "valType": "boolean",
                    "description": "Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.",
                    "role": "info"
                },
                "bgcolor": {
                    "valType": "color",
                    "dflt": "#fff",
                    "description": "Set the background color of the map",
                    "role": "style"
                },
                "coastlinecolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the coastline color.",
                    "role": "style"
                },
                "rivercolor": {
                    "valType": "color",
                    "dflt": "#3399FF",
                    "description": "Sets color of the rivers.",
                    "role": "style"
                },
                "framewidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the stroke width (in px) of the frame.",
                    "min": 0,
                    "role": "style"
                },
                "landcolor": {
                    "valType": "color",
                    "dflt": "#F0DC82",
                    "description": "Sets the land mass color.",
                    "role": "style"
                },
                "countrywidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets line width (in px) of the country boundaries.",
                    "min": 0,
                    "role": "style"
                },
                "showland": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not land masses are filled in color.",
                    "role": "info"
                },
                "showframe": {
                    "valType": "boolean",
                    "description": "Sets whether or not a frame is drawn around the map.",
                    "role": "info"
                },
                "coastlinewidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the coastline stroke width (in px).",
                    "min": 0,
                    "role": "style"
                },
                "role": "object",
                "subunitcolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the color of the subunits boundaries.",
                    "role": "style"
                },
                "framecolor": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets the color the frame.",
                    "role": "style"
                },
                "_isSubplotObj": true,
                "showrivers": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not rivers are drawn.",
                    "role": "info"
                },
                "oceancolor": {
                    "valType": "color",
                    "dflt": "#3399FF",
                    "description": "Sets the ocean color",
                    "role": "style"
                },
                "subunitwidth": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the stroke width (in px) of the subunits boundaries.",
                    "min": 0,
                    "role": "style"
                },
                "showlakes": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not lakes are drawn.",
                    "role": "info"
                },
                "resolution": {
                    "coerceNumber": true,
                    "valType": "enumerated",
                    "dflt": 110,
                    "description": "Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.",
                    "values": [
                        110,
                        50
                    ],
                    "role": "info"
                }
            },
            "titlefont": {
                "color": {
                    "valType": "color",
                    "role": "style"
                },
                "description": "Sets the title font.",
                "family": {
                    "valType": "string",
                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                    "strict": true,
                    "noBlank": true,
                    "role": "style"
                },
                "role": "object",
                "size": {
                    "valType": "number",
                    "min": 1,
                    "role": "style"
                }
            },
            "updatemenus": {
                "items": {
                    "updatemenu": {
                        "type": {
                            "valType": "enumerated",
                            "dflt": "dropdown",
                            "description": "Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically",
                            "values": [
                                "dropdown",
                                "buttons"
                            ],
                            "role": "info"
                        },
                        "showactive": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Highlights active dropdown item or active button if true.",
                            "role": "info"
                        },
                        "font": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the font of the update menu button text.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#BEC8D9",
                            "description": "Sets the color of the border enclosing the update menu.",
                            "role": "style"
                        },
                        "visible": {
                            "valType": "boolean",
                            "description": "Determines whether or not the update menu is visible.",
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the border enclosing the update menu.",
                            "role": "style",
                            "min": 0
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": -0.05,
                            "description": "Sets the x position (in normalized coordinates) of the update menu.",
                            "max": 3,
                            "role": "style"
                        },
                        "buttons": {
                            "items": {
                                "button": {
                                    "label": {
                                        "valType": "string",
                                        "dflt": "",
                                        "description": "Sets the text label to appear on the button.",
                                        "role": "info"
                                    },
                                    "method": {
                                        "valType": "enumerated",
                                        "dflt": "restyle",
                                        "description": "Sets the Plotly method to be called on click.",
                                        "values": [
                                            "restyle",
                                            "relayout",
                                            "animate",
                                            "update"
                                        ],
                                        "role": "info"
                                    },
                                    "role": "object",
                                    "args": {
                                        "valType": "info_array",
                                        "items": [
                                            {
                                                "valType": "any"
                                            },
                                            {
                                                "valType": "any"
                                            },
                                            {
                                                "valType": "any"
                                            }
                                        ],
                                        "description": "Sets the arguments values to be passed to the Plotly method set in `method` on click.",
                                        "freeLength": true,
                                        "role": "info"
                                    }
                                }
                            },
                            "role": "object"
                        },
                        "role": "object",
                        "_arrayAttrRegexps": [
                            {}
                        ],
                        "direction": {
                            "valType": "enumerated",
                            "dflt": "down",
                            "description": "Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.",
                            "values": [
                                "left",
                                "right",
                                "up",
                                "down"
                            ],
                            "role": "info"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "right",
                            "description": "Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
                            "values": [
                                "auto",
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "info"
                        },
                        "active": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Determines which button (by index starting from 0) is considered active.",
                            "min": -1,
                            "role": "info"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "description": "Sets the background color of the update menu buttons.",
                            "role": "style"
                        },
                        "pad": {
                            "r": {
                                "valType": "number",
                                "dflt": 0,
                                "description": "The amount of padding (in px) on the right side of the component.",
                                "role": "style"
                            },
                            "l": {
                                "valType": "number",
                                "dflt": 0,
                                "description": "The amount of padding (in px) on the left side of the component.",
                                "role": "style"
                            },
                            "b": {
                                "valType": "number",
                                "dflt": 0,
                                "description": "The amount of padding (in px) along the bottom of the component.",
                                "role": "style"
                            },
                            "t": {
                                "valType": "number",
                                "dflt": 0,
                                "description": "The amount of padding (in px) along the top of the component.",
                                "role": "style"
                            },
                            "description": "Sets the padding around the buttons or dropdown menu.",
                            "role": "object"
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the y position (in normalized coordinates) of the update menu.",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Sets the update menu's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
                            "values": [
                                "auto",
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "info"
                        }
                    }
                },
                "role": "object"
            },
            "margin": {
                "pad": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the amount of padding (in px) between the plotting area and the axis lines",
                    "min": 0,
                    "role": "info"
                },
                "r": {
                    "valType": "number",
                    "dflt": 80,
                    "description": "Sets the right margin (in px).",
                    "min": 0,
                    "role": "info"
                },
                "l": {
                    "valType": "number",
                    "dflt": 80,
                    "description": "Sets the left margin (in px).",
                    "min": 0,
                    "role": "info"
                },
                "b": {
                    "valType": "number",
                    "dflt": 80,
                    "description": "Sets the bottom margin (in px).",
                    "min": 0,
                    "role": "info"
                },
                "t": {
                    "valType": "number",
                    "dflt": 100,
                    "description": "Sets the top margin (in px).",
                    "min": 0,
                    "role": "info"
                },
                "autoexpand": {
                    "valType": "boolean",
                    "dflt": true,
                    "role": "info"
                },
                "role": "object"
            },
            "smith": {
                "valType": "enumerated",
                "dflt": false,
                "values": [
                    false
                ],
                "role": "info"
            }
        }
    },
    "frames": {
        "items": {
            "frames_entry": {
                "baseframe": {
                    "valType": "string",
                    "description": "The name of the frame into which this frame's properties are merged before applying. This is used to unify properties and avoid needing to specify the same values for the same properties in multiple frames.",
                    "role": "info"
                },
                "layout": {
                    "valType": "any",
                    "description": "Layout properties which this frame modifies. The format is identical to the normal layout definition.",
                    "role": "object"
                },
                "data": {
                    "valType": "any",
                    "description": "A list of traces this frame modifies. The format is identical to the normal trace definition.",
                    "role": "object"
                },
                "name": {
                    "valType": "string",
                    "description": "A label by which to identify the frame",
                    "role": "info"
                },
                "traces": {
                    "valType": "any",
                    "description": "A list of trace indices that identify the respective traces in the data attribute",
                    "role": "info"
                },
                "group": {
                    "valType": "string",
                    "description": "An identifier that specifies the group to which the frame belongs, used by animate to select a subset of frames.",
                    "role": "info"
                },
                "role": "object"
            }
        },
        "role": "object"
    },
    "transforms": {
        "groupby": {
            "attributes": {
                "enabled": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether this group-by transform is enabled or disabled."
                },
                "groups": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the groups in which the trace data will be split. For example, with `x` set to *[1, 2, 3, 4]* and `groups` set to *['a', 'b', 'a', 'b']*, the groupby transform with split in one trace with `x` [1, 3] and one trace with `x` [2, 4].",
                    "role": "data"
                },
                "groupssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  groups .",
                    "role": "info"
                },
                "style": {
                    "valType": "any",
                    "dflt": {},
                    "description": "Sets each group style. For example, with `groups` set to *['a', 'b', 'a', 'b']* and `style` set to *{ a: { marker: { color: 'red' } }} marker points in group *'a'* will be drawn in red."
                }
            }
        },
        "ohlc": {
            "attributes": {}
        },
        "candlestick": {
            "attributes": {}
        },
        "filter": {
            "attributes": {
                "enabled": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether this filter transform is enabled or disabled."
                },
                "operation": {
                    "valType": "enumerated",
                    "dflt": "=",
                    "description": "Sets the filter operation. *=* keeps items equal to `value` *<* keeps items less than `value` *<=* keeps items less than or equal to `value` *>* keeps items greater than `value` *>=* keeps items greater than or equal to `value` *[]* keeps items inside `value[0]` to value[1]` including both bounds` *()* keeps items inside `value[0]` to value[1]` excluding both bounds` *[)* keeps items inside `value[0]` to value[1]` including `value[0]` but excluding `value[1] *(]* keeps items inside `value[0]` to value[1]` excluding `value[0]` but including `value[1] *][* keeps items outside `value[0]` to value[1]` and equal to both bounds` *)(* keeps items outside `value[0]` to value[1]` *](* keeps items outside `value[0]` to value[1]` and equal to `value[0]` *)[* keeps items outside `value[0]` to value[1]` and equal to `value[1]` *{}* keeps items present in a set of values *}{* keeps items not present in a set of values",
                    "values": [
                        "=",
                        "<",
                        ">=",
                        ">",
                        "<=",
                        "[]",
                        "()",
                        "[)",
                        "(]",
                        "][",
                        ")(",
                        "](",
                        ")[",
                        "{}",
                        "}{"
                    ]
                },
                "value": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Sets the value or values by which to filter by. Values are expected to be in the same type as the data linked to *target*. When `operation` is set to one of the inequality values (=,<,>=,>,<=) *value* is expected to be a number or a string. When `operation` is set to one of the interval value ([],(),[),(],][,)(,](,)[) *value* is expected to be 2-item array where the first item is the lower bound and the second item is the upper bound. When `operation`, is set to one of the set value ({},}{) *value* is expected to be an array with as many items as the desired set elements."
                },
                "target": {
                    "arrayOk": true,
                    "noBlank": true,
                    "valType": "string",
                    "dflt": "x",
                    "description": "Sets the filter target by which the filter is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To filter about nested variables, use *.* to access them. For example, set `target` to *marker.color* to filter about the marker color array. If an array, *target* is then the data array by which the filter is applied.",
                    "strict": true
                },
                "valuecalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use for `value`, if it is a date.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "targetcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use for `target`, if it is an array of dates. If `target` is a string (eg *x*) we use the corresponding trace attribute (eg `xcalendar`) if it exists, even if `targetcalendar` is provided.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "targetsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  target .",
                    "role": "info"
                }
            }
        }
    },
    "animation": {
        "frame": {
            "redraw": {
                "valType": "boolean",
                "dflt": true,
                "description": "Redraw the plot at completion of the transition. This is desirable for transitions that include properties that cannot be transitioned, but may significantly slow down updates that do not require a full redraw of the plot",
                "role": "info"
            },
            "role": "object",
            "duration": {
                "valType": "number",
                "dflt": 500,
                "description": "The duration in milliseconds of each frame. If greater than the frame duration, it will be limited to the frame duration.",
                "min": 0,
                "role": "info"
            }
        },
        "mode": {
            "valType": "enumerated",
            "dflt": "afterall",
            "description": "Describes how a new animate call interacts with currently-running animations. If `immediate`, current animations are interrupted and the new animation is started. If `next`, the current frame is allowed to complete, after which the new animation is started. If `afterall` all existing frames are animated to completion before the new animation is started.",
            "values": [
                "immediate",
                "next",
                "afterall"
            ],
            "role": "info"
        },
        "transition": {
            "easing": {
                "valType": "enumerated",
                "dflt": "cubic-in-out",
                "description": "The easing function used for the transition",
                "values": [
                    "linear",
                    "quad",
                    "cubic",
                    "sin",
                    "exp",
                    "circle",
                    "elastic",
                    "back",
                    "bounce",
                    "linear-in",
                    "quad-in",
                    "cubic-in",
                    "sin-in",
                    "exp-in",
                    "circle-in",
                    "elastic-in",
                    "back-in",
                    "bounce-in",
                    "linear-out",
                    "quad-out",
                    "cubic-out",
                    "sin-out",
                    "exp-out",
                    "circle-out",
                    "elastic-out",
                    "back-out",
                    "bounce-out",
                    "linear-in-out",
                    "quad-in-out",
                    "cubic-in-out",
                    "sin-in-out",
                    "exp-in-out",
                    "circle-in-out",
                    "elastic-in-out",
                    "back-in-out",
                    "bounce-in-out"
                ],
                "role": "info"
            },
            "role": "object",
            "duration": {
                "valType": "number",
                "dflt": 500,
                "description": "The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.",
                "min": 0,
                "role": "info"
            }
        },
        "direction": {
            "valType": "enumerated",
            "dflt": "forward",
            "description": "The direction in which to play the frames triggered by the animation call",
            "values": [
                "forward",
                "reverse"
            ],
            "role": "info"
        },
        "fromcurrent": {
            "valType": "boolean",
            "dflt": false,
            "description": "Play frames starting at the current frame instead of the beginning.",
            "role": "info"
        }
    },
    "traces": {
        "histogram2d": {
            "meta": {
                "hrName": "histogram_2d",
                "description": "The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap."
            },
            "attributes": {
                "type": "histogram2d",
                "histnorm": {
                    "valType": "enumerated",
                    "dflt": "",
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "role": "style"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "zmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "zsmooth": {
                    "valType": "enumerated",
                    "dflt": false,
                    "description": "Picks a smoothing algorithm use to smooth `z` data.",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "role": "style"
                },
                "nbinsy": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.",
                    "role": "style",
                    "min": 0
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "autobiny": {
                    "valType": "boolean",
                    "dflt": null,
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.",
                    "role": "style"
                },
                "xbins": {
                    "end": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the end value for the x axis bins.",
                        "role": "style"
                    },
                    "size": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the step in-between value each x axis bin.",
                        "role": "style"
                    },
                    "role": "object",
                    "start": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the starting value for the x axis bins.",
                        "role": "style"
                    }
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "ybins": {
                    "end": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the end value for the y axis bins.",
                        "role": "style"
                    },
                    "size": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the step in-between value each y axis bin.",
                        "role": "style"
                    },
                    "role": "object",
                    "start": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the starting value for the y axis bins.",
                        "role": "style"
                    }
                },
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "xgap": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the horizontal gap (in pixels) between bricks.",
                    "role": "style",
                    "min": 0
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "marker": {
                    "color": {
                        "valType": "data_array",
                        "description": "Sets the aggregation data.",
                        "role": "data"
                    },
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "zmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the sample data to be binned on the x axis.",
                    "role": "data"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "zauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "ygap": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the vertical gap (in pixels) between bricks.",
                    "role": "style",
                    "min": 0
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the aggregation data.",
                    "role": "data"
                },
                "nbinsx": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.",
                    "role": "style",
                    "min": 0
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "histfunc": {
                    "valType": "enumerated",
                    "dflt": "count",
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "role": "style"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the sample data to be binned on the y axis.",
                    "role": "data"
                },
                "autobinx": {
                    "valType": "boolean",
                    "dflt": null,
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.",
                    "role": "style"
                }
            }
        },
        "histogram": {
            "meta": {
                "description": "The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided."
            },
            "layoutAttributes": {
                "bargap": {
                    "valType": "number",
                    "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
                    "max": 1,
                    "role": "style",
                    "min": 0
                },
                "barmode": {
                    "valType": "enumerated",
                    "dflt": "group",
                    "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
                    "values": [
                        "stack",
                        "group",
                        "overlay",
                        "relative"
                    ],
                    "role": "info"
                },
                "barnorm": {
                    "valType": "enumerated",
                    "dflt": "",
                    "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents.",
                    "values": [
                        "",
                        "fraction",
                        "percent"
                    ],
                    "role": "info"
                },
                "bargroupgap": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
                    "max": 1,
                    "role": "style"
                }
            },
            "attributes": {
                "type": "histogram",
                "histnorm": {
                    "valType": "enumerated",
                    "dflt": "",
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "role": "style"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "info"
                },
                "cumulative": {
                    "currentbin": {
                        "valType": "enumerated",
                        "dflt": "include",
                        "description": "Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. *include* is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. *exclude* makes the opposite half-bin bias, and *half* removes it.",
                        "values": [
                            "include",
                            "exclude",
                            "half"
                        ],
                        "role": "info"
                    },
                    "enabled": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the *density* `histnorm` settings behave the same as their equivalents without *density*: ** and *density* both rise to the number of data points, and *probability* and *probability density* both rise to the number of sample points.",
                        "role": "info"
                    },
                    "direction": {
                        "valType": "enumerated",
                        "dflt": "increasing",
                        "description": "Only applies if cumulative is enabled. If *increasing* (default) we sum all prior bins, so the result increases from left to right. If *decreasing* we sum later bins so the result decreases from left to right.",
                        "values": [
                            "increasing",
                            "decreasing"
                        ],
                        "role": "info"
                    },
                    "role": "object"
                },
                "_deprecated": {
                    "bardir": {
                        "valType": "enumerated",
                        "description": "Renamed to `orientation`.",
                        "values": [
                            "v",
                            "h"
                        ],
                        "role": "info"
                    }
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "nbinsy": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.",
                    "role": "style",
                    "min": 0
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "autobiny": {
                    "valType": "boolean",
                    "dflt": null,
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.",
                    "role": "style"
                },
                "orientation": {
                    "valType": "enumerated",
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
                    "values": [
                        "v",
                        "h"
                    ],
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "ybins": {
                    "end": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the end value for the y axis bins.",
                        "role": "style"
                    },
                    "size": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the step in-between value each y axis bin.",
                        "role": "style"
                    },
                    "role": "object",
                    "start": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the starting value for the y axis bins.",
                        "role": "style"
                    }
                },
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "error_x": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "xbins": {
                    "end": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the end value for the x axis bins.",
                        "role": "style"
                    },
                    "size": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the step in-between value each x axis bin.",
                        "role": "style"
                    },
                    "role": "object",
                    "start": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the starting value for the x axis bins.",
                        "role": "style"
                    }
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "marker": {
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "role": "object",
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "role": "info"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "role": "object",
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "role": "info"
                        },
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "width": {
                            "arrayOk": true,
                            "min": 0,
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "role": "style"
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "error_y": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the sample data to be binned on the x axis.",
                    "role": "data"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "nbinsx": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.",
                    "role": "style",
                    "min": 0
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "histfunc": {
                    "valType": "enumerated",
                    "dflt": "count",
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "role": "style"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the sample data to be binned on the y axis.",
                    "role": "data"
                },
                "autobinx": {
                    "valType": "boolean",
                    "dflt": null,
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.",
                    "role": "style"
                }
            }
        },
        "heatmapgl": {
            "meta": {
                "description": "WebGL version of the heatmap trace type."
            },
            "attributes": {
                "type": "heatmapgl",
                "zauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "text": {
                    "valType": "data_array",
                    "description": "Sets the text elements associated with each z value.",
                    "role": "data"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "zmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "dx": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "role": "info"
                },
                "dy": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "ytype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "zmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "xtype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "y0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "role": "info"
                },
                "transpose": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data.",
                    "role": "info"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the z data.",
                    "role": "data"
                },
                "x0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "pointcloud": {
            "meta": {
                "description": "The data visualized as a point cloud set in `x` and `y` using the WebGl plotting engine."
            },
            "attributes": {
                "type": "pointcloud",
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
                    "role": "info"
                },
                "xbounds": {
                    "valType": "data_array",
                    "description": "Specify `xbounds` in the shape of `[xMin, xMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `ybounds` for the performance benefits.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "ybounds": {
                    "valType": "data_array",
                    "description": "Specify `ybounds` in the shape of `[yMin, yMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `xbounds` for the performance benefits.",
                    "role": "data"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "xysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  xy .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "yboundssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  ybounds .",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "marker": {
                    "sizemin": {
                        "min": 0.1,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the minimum size (in px) of the rendered marker points, effective when the `pointcloud` shows a million or more points.",
                        "max": 2,
                        "role": "style"
                    },
                    "role": "object",
                    "color": {
                        "valType": "color",
                        "arrayOk": false,
                        "description": "Sets the marker fill color. It accepts a specific color.If the color is not fully opaque and there are hundreds of thousandsof points, it may cause slower zooming and panning.",
                        "role": "style"
                    },
                    "blend": {
                        "valType": "boolean",
                        "dflt": null,
                        "description": "Determines if colors are blended together for a translucency effect in case `opacity` is specified as a value less then `1`. Setting `blend` to `true` reduces zoom/pan speed if used with large numbers of points.",
                        "role": "style"
                    },
                    "opacity": {
                        "arrayOk": false,
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the marker opacity. The default value is `1` (fully opaque). If the markers are not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning. Opacity fades the color even if `blend` is left on `false` even if there is no translucency effect in that case.",
                        "max": 1,
                        "role": "style"
                    },
                    "sizemax": {
                        "valType": "number",
                        "dflt": 20,
                        "description": "Sets the maximum size (in px) of the rendered marker points. Effective when the `pointcloud` shows only few points.",
                        "role": "style",
                        "min": 0.1
                    },
                    "border": {
                        "color": {
                            "valType": "color",
                            "arrayOk": false,
                            "description": "Sets the stroke color. It accepts a specific color. If the color is not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning.",
                            "role": "style"
                        },
                        "role": "object",
                        "arearatio": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 0,
                            "description": "Specifies what fraction of the marker area is covered with the border.",
                            "max": 1,
                            "role": "style"
                        }
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "indices": {
                    "valType": "data_array",
                    "description": "A sequential value, 0..n, supply it to avoid creating this array inside plotting. If specified, it must be a typed `Int32Array` array. Its length must be equal to or greater than the number of points. For the best performance and memory use, create one large `indices` typed array that is guaranteed to be at least as long as the largest number of points during use, and reuse it on each `Plotly.restyle()` call.",
                    "role": "data"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "xy": {
                    "valType": "data_array",
                    "description": "Faster alternative to specifying `x` and `y` separately. If supplied, it must be a typed `Float32Array` array that represents points such that `xy[i * 2] = x[i]` and `xy[i * 2 + 1] = y[i]`",
                    "role": "data"
                },
                "xboundssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  xbounds .",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "indicessrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  indices .",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "scattergeo": {
            "meta": {
                "hrName": "scatter_geo",
                "description": "The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`."
            },
            "attributes": {
                "type": "scattergeo",
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "info"
                },
                "fill": {
                    "valType": "enumerated",
                    "dflt": "none",
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.",
                    "values": [
                        "none",
                        "toself"
                    ],
                    "role": "style"
                },
                "hovertext": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "hovertextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hovertext .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "lon",
                        "lat",
                        "location",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "latsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  lat .",
                    "role": "info"
                },
                "textposition": {
                    "arrayOk": true,
                    "valType": "enumerated",
                    "dflt": "middle center",
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "role": "style"
                },
                "lonsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  lon .",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "locations": {
                    "valType": "data_array",
                    "description": "Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.",
                    "role": "data"
                },
                "marker": {
                    "sizemode": {
                        "valType": "enumerated",
                        "dflt": "diameter",
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "role": "info"
                    },
                    "sizemin": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "role": "style",
                        "min": 0
                    },
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "sizeref": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "role": "style"
                    },
                    "opacitysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "role": "info"
                    },
                    "role": "object",
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "symbol": {
                        "arrayOk": true,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "role": "style"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "role": "info"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "role": "object",
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "role": "info"
                        },
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "arrayOk": true,
                            "role": "style",
                            "min": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    },
                    "opacity": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    }
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "lat": {
                    "valType": "data_array",
                    "description": "Sets the latitude coordinates (in degrees North).",
                    "role": "data"
                },
                "mode": {
                    "valType": "flaglist",
                    "dflt": "markers",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "role": "info"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "textpositionsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "role": "info"
                },
                "locationmode": {
                    "valType": "enumerated",
                    "dflt": "ISO-3",
                    "description": "Determines the set of locations used to match entries in `locations` to regions on the map.",
                    "values": [
                        "ISO-3",
                        "USA-states",
                        "country names"
                    ],
                    "role": "info"
                },
                "lon": {
                    "valType": "data_array",
                    "description": "Sets the longitude coordinates (in degrees East).",
                    "role": "data"
                },
                "textfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "valType": "string",
                        "arrayOk": true,
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the text font.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "line": {
                    "color": {
                        "valType": "color",
                        "description": "Sets the line color.",
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "geo": {
                    "valType": "subplotid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
                    "role": "info"
                },
                "locationssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  locations .",
                    "role": "info"
                }
            }
        },
        "scattermapbox": {
            "meta": {
                "hrName": "scatter_mapbox",
                "description": "The data visualized as scatter point, lines or marker symbols on a Mapbox GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`."
            },
            "attributes": {
                "type": "scattermapbox",
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "info"
                },
                "line": {
                    "color": {
                        "valType": "color",
                        "description": "Sets the line color.",
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object"
                },
                "hovertext": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "hovertextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hovertext .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "lon",
                        "lat",
                        "text",
                        "name",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "latsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  lat .",
                    "role": "info"
                },
                "textposition": {
                    "arrayOk": false,
                    "valType": "enumerated",
                    "dflt": "middle center",
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "role": "style"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "marker": {
                    "sizemode": {
                        "valType": "enumerated",
                        "dflt": "diameter",
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "role": "info"
                    },
                    "sizemin": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "role": "style",
                        "min": 0
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "sizeref": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "role": "style"
                    },
                    "role": "object",
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "symbol": {
                        "valType": "string",
                        "dflt": "circle",
                        "arrayOk": true,
                        "description": "Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for *circle* symbols.",
                        "role": "style"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    },
                    "opacity": {
                        "arrayOk": false,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    }
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "subplot": {
                    "valType": "subplotid",
                    "dflt": "mapbox",
                    "description": "Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "lat": {
                    "valType": "data_array",
                    "description": "Sets the latitude coordinates (in degrees North).",
                    "role": "data"
                },
                "mode": {
                    "valType": "flaglist",
                    "dflt": "markers",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "role": "info"
                },
                "lonsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  lon .",
                    "role": "info"
                },
                "lon": {
                    "valType": "data_array",
                    "description": "Sets the longitude coordinates (in degrees East).",
                    "role": "data"
                },
                "textfont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets the icon text font. Has an effect only when `type` is set to *symbol*.",
                    "family": {
                        "noBlank": true,
                        "valType": "string",
                        "dflt": "Open Sans Regular, Arial Unicode MS Regular",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "fill": {
                    "valType": "enumerated",
                    "dflt": "none",
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.",
                    "values": [
                        "none",
                        "toself"
                    ],
                    "role": "style"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                }
            }
        },
        "surface": {
            "meta": {
                "description": "The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a {2D array}. Coordinates in `x` and `y` can either be 1D {arrays} or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a {2D array}, where its bounds can be controlled using `cmin` and `cmax`."
            },
            "attributes": {
                "type": "surface",
                "text": {
                    "valType": "data_array",
                    "description": "Sets the text elements associated with each z value.",
                    "role": "data"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "lightposition": {
                    "z": {
                        "min": -100000,
                        "valType": "number",
                        "dflt": 0,
                        "description": "Numeric vector, representing the Z coordinate for each vertex.",
                        "max": 100000,
                        "role": "style"
                    },
                    "y": {
                        "min": -100000,
                        "valType": "number",
                        "dflt": 10000,
                        "description": "Numeric vector, representing the Y coordinate for each vertex.",
                        "max": 100000,
                        "role": "style"
                    },
                    "role": "object",
                    "x": {
                        "min": -100000,
                        "valType": "number",
                        "dflt": 10,
                        "description": "Numeric vector, representing the X coordinate for each vertex.",
                        "max": 100000,
                        "role": "style"
                    }
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "scene": {
                    "valType": "subplotid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "cmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "surfacecolor": {
                    "valType": "data_array",
                    "description": "Sets the surface color values, used for setting a color scale independent of `z`.",
                    "role": "data"
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "hidesurface": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not a surface is drawn. For example, set `hidesurface` to *false* `contours.x.show` to *true* and `contours.y.show` to *true* to draw a wire frame plot.",
                    "role": "info"
                },
                "_deprecated": {
                    "zauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Obsolete. Use `cauto` instead.",
                        "role": "info"
                    },
                    "zmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Obsolete. Use `cmin` instead.",
                        "role": "info"
                    },
                    "zmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Obsolete. Use `cmax` instead.",
                        "role": "info"
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the surface.",
                    "max": 1,
                    "role": "style"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "cauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `z` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the z coordinates.",
                    "role": "data"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "lighting": {
                    "roughness": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                        "max": 1,
                        "role": "style"
                    },
                    "ambient": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.8,
                        "description": "Ambient light increases overall color visibility but can wash out the image.",
                        "max": 1,
                        "role": "style"
                    },
                    "specular": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.05,
                        "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                        "max": 2,
                        "role": "style"
                    },
                    "fresnel": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.2,
                        "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                        "max": 5,
                        "role": "style"
                    },
                    "role": "object",
                    "diffuse": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.8,
                        "description": "Represents the extent that incident rays are reflected in a range of angles.",
                        "max": 1,
                        "role": "style"
                    }
                },
                "cmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "contours": {
                    "z": {
                        "project": {
                            "z": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            },
                            "y": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            },
                            "role": "object",
                            "x": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            }
                        },
                        "highlightcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the color of the highlighted contour lines.",
                            "role": "style"
                        },
                        "highlight": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not contour lines about the z dimension are highlighted on hover.",
                            "role": "info"
                        },
                        "usecolormap": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.",
                            "role": "info"
                        },
                        "role": "object",
                        "color": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the color of the contour lines.",
                            "role": "style"
                        },
                        "width": {
                            "min": 1,
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width of the contour lines.",
                            "max": 16,
                            "role": "style"
                        },
                        "show": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Determines whether or not contour lines about the z dimension are drawn.",
                            "role": "info"
                        },
                        "highlightwidth": {
                            "min": 1,
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width of the highlighted contour lines.",
                            "max": 16,
                            "role": "style"
                        }
                    },
                    "y": {
                        "project": {
                            "z": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            },
                            "y": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            },
                            "role": "object",
                            "x": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            }
                        },
                        "highlightcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the color of the highlighted contour lines.",
                            "role": "style"
                        },
                        "highlight": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not contour lines about the y dimension are highlighted on hover.",
                            "role": "info"
                        },
                        "usecolormap": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.",
                            "role": "info"
                        },
                        "role": "object",
                        "color": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the color of the contour lines.",
                            "role": "style"
                        },
                        "width": {
                            "min": 1,
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width of the contour lines.",
                            "max": 16,
                            "role": "style"
                        },
                        "show": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Determines whether or not contour lines about the y dimension are drawn.",
                            "role": "info"
                        },
                        "highlightwidth": {
                            "min": 1,
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width of the highlighted contour lines.",
                            "max": 16,
                            "role": "style"
                        }
                    },
                    "role": "object",
                    "x": {
                        "project": {
                            "z": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            },
                            "y": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            },
                            "role": "object",
                            "x": {
                                "valType": "boolean",
                                "dflt": false,
                                "description": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
                                "role": "info"
                            }
                        },
                        "highlightcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the color of the highlighted contour lines.",
                            "role": "style"
                        },
                        "highlight": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not contour lines about the x dimension are highlighted on hover.",
                            "role": "info"
                        },
                        "usecolormap": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.",
                            "role": "info"
                        },
                        "role": "object",
                        "color": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the color of the contour lines.",
                            "role": "style"
                        },
                        "width": {
                            "min": 1,
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width of the contour lines.",
                            "max": 16,
                            "role": "style"
                        },
                        "show": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Determines whether or not contour lines about the x dimension are drawn.",
                            "role": "info"
                        },
                        "highlightwidth": {
                            "min": 1,
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width of the highlighted contour lines.",
                            "max": 16,
                            "role": "style"
                        }
                    }
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "surfacecolorsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  surfacecolor .",
                    "role": "info"
                }
            }
        },
        "scatterternary": {
            "meta": {
                "hrName": "scatter_ternary",
                "description": "Provides similar functionality to the *scatter* type but on a ternary phase diagram. The data is provided by at least two arrays out of `a`, `b`, `c` triplets."
            },
            "attributes": {
                "type": "scatterternary",
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "info"
                },
                "sum": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum",
                    "min": 0,
                    "role": "info"
                },
                "hovertext": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a *text* flag.",
                    "role": "info"
                },
                "b": {
                    "valType": "data_array",
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "hoveron": {
                    "valType": "flaglist",
                    "flags": [
                        "points",
                        "fills"
                    ],
                    "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "hovertextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hovertext .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "a",
                        "b",
                        "c",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "textposition": {
                    "arrayOk": true,
                    "valType": "enumerated",
                    "dflt": "middle center",
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "role": "style"
                },
                "asrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  a .",
                    "role": "info"
                },
                "csrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  c .",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "marker": {
                    "maxdisplayed": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                        "role": "style",
                        "min": 0
                    },
                    "sizemode": {
                        "valType": "enumerated",
                        "dflt": "diameter",
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "role": "info"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "sizeref": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "role": "style"
                    },
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "symbol": {
                        "arrayOk": true,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "role": "style"
                    },
                    "opacitysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "role": "info"
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "opacity": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "sizemin": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "role": "style",
                        "min": 0
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "role": "object",
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `.color` array index, and if set, `.cmin` must be set as well.",
                            "role": "info"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "role": "object",
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `.color` array index, and if set, `.cmax` must be set as well.",
                            "role": "info"
                        },
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the  color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `.cmin` and `.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "arrayOk": true,
                            "role": "style",
                            "min": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    }
                },
                "bsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  b .",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "subplot": {
                    "valType": "subplotid",
                    "dflt": "ternary",
                    "description": "Sets a reference between this trace's data coordinates and a ternary subplot. If *ternary* (the default value), the data refer to `layout.ternary`. If *ternary2*, the data refer to `layout.ternary2`, and so on.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "mode": {
                    "valType": "flaglist",
                    "dflt": "markers",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "role": "info"
                },
                "line": {
                    "smoothing": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                        "max": 1.3,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the line color.",
                        "role": "style"
                    },
                    "shape": {
                        "valType": "enumerated",
                        "dflt": "linear",
                        "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                        "values": [
                            "linear",
                            "spline"
                        ],
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "textpositionsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "role": "info"
                },
                "c": {
                    "valType": "data_array",
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "role": "data"
                },
                "textfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "valType": "string",
                        "arrayOk": true,
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the text font.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "fill": {
                    "valType": "enumerated",
                    "dflt": "none",
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
                    "values": [
                        "none",
                        "toself",
                        "tonext"
                    ],
                    "role": "style"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "a": {
                    "valType": "data_array",
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "role": "data"
                }
            }
        },
        "parcoords": {
            "meta": {
                "description": "Parallel coordinates for multidimensional exploratory data analysis. The samples are specified in `dimensions`. The colors are set in `line.color`."
            },
            "attributes": {
                "type": "parcoords",
                "domain": {
                    "y": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the vertical domain of this `parcoords` trace (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    },
                    "role": "object",
                    "x": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the horizontal domain of this `parcoords` trace (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "line": {
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `line.color` array index, and if set, `line.cmin` must be set as well.",
                        "role": "info"
                    },
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed. The default value is false, so that `parcoords` colorscale can default to `Viridis`.",
                        "role": "style"
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "dflt": [
                            [
                                0,
                                "#440154"
                            ],
                            [
                                0.06274509803921569,
                                "#48186a"
                            ],
                            [
                                0.12549019607843137,
                                "#472d7b"
                            ],
                            [
                                0.18823529411764706,
                                "#424086"
                            ],
                            [
                                0.25098039215686274,
                                "#3b528b"
                            ],
                            [
                                0.3137254901960784,
                                "#33638d"
                            ],
                            [
                                0.3764705882352941,
                                "#2c728e"
                            ],
                            [
                                0.4392156862745098,
                                "#26828e"
                            ],
                            [
                                0.5019607843137255,
                                "#21918c"
                            ],
                            [
                                0.5647058823529412,
                                "#1fa088"
                            ],
                            [
                                0.6274509803921569,
                                "#28ae80"
                            ],
                            [
                                0.6901960784313725,
                                "#3fbc73"
                            ],
                            [
                                0.7529411764705882,
                                "#5ec962"
                            ],
                            [
                                0.8156862745098039,
                                "#84d44b"
                            ],
                            [
                                0.8784313725490196,
                                "#addc30"
                            ],
                            [
                                0.9411764705882353,
                                "#d8e219"
                            ],
                            [
                                1,
                                "#fde725"
                            ]
                        ],
                        "description": "Sets the colorscale and only has an effect if `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "role": "object",
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `line.color` array index, and if set, `line.cmax` must be set as well.",
                        "role": "info"
                    }
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "dimensions": {
                    "items": {
                        "dimension": {
                            "ticktextsrc": {
                                "valType": "string",
                                "description": "Sets the source reference on plot.ly for  ticktext .",
                                "role": "info"
                            },
                            "visible": {
                                "valType": "boolean",
                                "dflt": true,
                                "description": "Shows the dimension when set to `true` (the default). Hides the dimension for `false`.",
                                "role": "info"
                            },
                            "ticktext": {
                                "valType": "data_array",
                                "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                                "role": "data"
                            },
                            "tickformat": {
                                "valType": "string",
                                "dflt": "3s",
                                "description": "Sets the tick label formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-format/blob/master/README.md#locale_format",
                                "role": "style"
                            },
                            "description": "The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.",
                            "label": {
                                "valType": "string",
                                "description": "The shown name of the dimension.",
                                "role": "info"
                            },
                            "values": {
                                "valType": "data_array",
                                "dflt": [],
                                "description": "Dimension values. `values[n]` represents the value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated). Each value must be a finite number.",
                                "role": "data"
                            },
                            "role": "object",
                            "valuessrc": {
                                "valType": "string",
                                "description": "Sets the source reference on plot.ly for  values .",
                                "role": "info"
                            },
                            "range": {
                                "valType": "info_array",
                                "items": [
                                    {
                                        "valType": "number"
                                    },
                                    {
                                        "valType": "number"
                                    }
                                ],
                                "description": "The domain range that represents the full, shown axis extent. Defaults to the `values` extent. Must be an array of `[fromValue, toValue]` with finite numbers as elements.",
                                "role": "info"
                            },
                            "tickvals": {
                                "valType": "data_array",
                                "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                                "role": "data"
                            },
                            "tickvalssrc": {
                                "valType": "string",
                                "description": "Sets the source reference on plot.ly for  tickvals .",
                                "role": "info"
                            },
                            "constraintrange": {
                                "valType": "info_array",
                                "items": [
                                    {
                                        "valType": "number"
                                    },
                                    {
                                        "valType": "number"
                                    }
                                ],
                                "description": "The domain range to which the filter on the dimension is constrained. Must be an array of `[fromValue, toValue]` with finite numbers as elements.",
                                "role": "info"
                            }
                        }
                    },
                    "role": "object"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                }
            }
        },
        "heatmap": {
            "meta": {
                "description": "The data that describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements. If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets."
            },
            "attributes": {
                "type": "heatmap",
                "zauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "text": {
                    "valType": "data_array",
                    "description": "Sets the text elements associated with each z value.",
                    "role": "data"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "xgap": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the horizontal gap (in pixels) between bricks.",
                    "role": "style",
                    "min": 0
                },
                "zmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "dx": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "role": "info"
                },
                "dy": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "ytype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "zsmooth": {
                    "valType": "enumerated",
                    "dflt": false,
                    "description": "Picks a smoothing algorithm use to smooth `z` data.",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "role": "style"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "zmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "xtype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "y0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "role": "info"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.",
                    "role": "info"
                },
                "transpose": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data.",
                    "role": "info"
                },
                "ygap": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the vertical gap (in pixels) between bricks.",
                    "role": "style",
                    "min": 0
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the z data.",
                    "role": "data"
                },
                "x0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "histogram2dcontour": {
            "meta": {
                "hrName": "histogram_2d_contour",
                "description": "The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot."
            },
            "attributes": {
                "type": "histogram2dcontour",
                "histnorm": {
                    "valType": "enumerated",
                    "dflt": "",
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "role": "style"
                },
                "contours": {
                    "start": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the starting contour level value. Must be less than `contours.end`",
                        "role": "style"
                    },
                    "end": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the end contour level value. Must be more than `contours.start`",
                        "role": "style"
                    },
                    "coloring": {
                        "valType": "enumerated",
                        "dflt": "fill",
                        "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                        "values": [
                            "fill",
                            "heatmap",
                            "lines",
                            "none"
                        ],
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the step between each contour level. Must be positive.",
                        "role": "style",
                        "min": 0
                    },
                    "showlines": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.",
                        "role": "style"
                    },
                    "role": "object"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "zmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "nbinsy": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.",
                    "role": "style",
                    "min": 0
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "autobiny": {
                    "valType": "boolean",
                    "dflt": null,
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.",
                    "role": "style"
                },
                "xbins": {
                    "end": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the end value for the x axis bins.",
                        "role": "style"
                    },
                    "size": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the step in-between value each x axis bin.",
                        "role": "style"
                    },
                    "role": "object",
                    "start": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the starting value for the x axis bins.",
                        "role": "style"
                    }
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "ybins": {
                    "end": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the end value for the y axis bins.",
                        "role": "style"
                    },
                    "size": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the step in-between value each y axis bin.",
                        "role": "style"
                    },
                    "role": "object",
                    "start": {
                        "valType": "any",
                        "dflt": null,
                        "description": "Sets the starting value for the y axis bins.",
                        "role": "style"
                    }
                },
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "marker": {
                    "color": {
                        "valType": "data_array",
                        "description": "Sets the aggregation data.",
                        "role": "data"
                    },
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "zmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "ncontours": {
                    "valType": "integer",
                    "dflt": 15,
                    "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
                    "role": "style",
                    "min": 1
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the sample data to be binned on the x axis.",
                    "role": "data"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "zauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the aggregation data.",
                    "role": "data"
                },
                "nbinsx": {
                    "valType": "integer",
                    "dflt": 0,
                    "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.",
                    "role": "style",
                    "min": 0
                },
                "autocontour": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
                    "role": "style"
                },
                "line": {
                    "color": {
                        "valType": "color",
                        "description": "Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*.",
                        "role": "style"
                    },
                    "smoothing": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                        "max": 1.3,
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "histfunc": {
                    "valType": "enumerated",
                    "dflt": "count",
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "role": "style"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the sample data to be binned on the y axis.",
                    "role": "data"
                },
                "autobinx": {
                    "valType": "boolean",
                    "dflt": null,
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.",
                    "role": "style"
                }
            }
        },
        "choropleth": {
            "meta": {
                "description": "The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`."
            },
            "attributes": {
                "type": "choropleth",
                "zauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "text": {
                    "valType": "data_array",
                    "description": "Sets the text elements associated with each location.",
                    "role": "data"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "zmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "location",
                        "z",
                        "text",
                        "name",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "locations": {
                    "valType": "data_array",
                    "description": "Sets the coordinates via location IDs or names. See `locationmode` for more info.",
                    "role": "data"
                },
                "marker": {
                    "role": "object",
                    "line": {
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "width": {
                            "arrayOk": true,
                            "min": 0,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "role": "style"
                        },
                        "role": "object",
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        }
                    }
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "zmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "locationmode": {
                    "valType": "enumerated",
                    "dflt": "ISO-3",
                    "description": "Determines the set of locations used to match entries in `locations` to regions on the map.",
                    "values": [
                        "ISO-3",
                        "USA-states",
                        "country names"
                    ],
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the color values.",
                    "role": "data"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "geo": {
                    "valType": "subplotid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
                    "role": "info"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "locationssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  locations .",
                    "role": "info"
                }
            }
        },
        "candlestick": {
            "meta": {
                "description": "The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red."
            },
            "attributes": {
                "type": "candlestick",
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.",
                    "role": "info"
                },
                "open": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the open values.",
                    "role": "data"
                },
                "lowsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  low .",
                    "role": "info"
                },
                "high": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the high values.",
                    "role": "data"
                },
                "low": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the low values.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "decreasing": {
                    "name": {
                        "valType": "string",
                        "description": "Sets the segment name. The segment name appear as the legend item and on hover.",
                        "role": "info"
                    },
                    "showlegend": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not an item corresponding to this segment is shown in the legend.",
                        "role": "info"
                    },
                    "fillcolor": {
                        "valType": "color",
                        "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                        "role": "style"
                    },
                    "line": {
                        "color": {
                            "valType": "color",
                            "dflt": "#FF4136",
                            "description": "Sets the color of line bounding the box(es).",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width (in px) of line bounding the box(es).",
                            "min": 0,
                            "role": "style"
                        },
                        "role": "object"
                    },
                    "role": "object"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "increasing": {
                    "name": {
                        "valType": "string",
                        "description": "Sets the segment name. The segment name appear as the legend item and on hover.",
                        "role": "info"
                    },
                    "showlegend": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not an item corresponding to this segment is shown in the legend.",
                        "role": "info"
                    },
                    "fillcolor": {
                        "valType": "color",
                        "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                        "role": "style"
                    },
                    "line": {
                        "color": {
                            "valType": "color",
                            "dflt": "#3D9970",
                            "description": "Sets the color of line bounding the box(es).",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the width (in px) of line bounding the box(es).",
                            "min": 0,
                            "role": "style"
                        },
                        "role": "object"
                    },
                    "role": "object"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "close": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the close values.",
                    "role": "data"
                },
                "opensrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  open .",
                    "role": "info"
                },
                "closesrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  close .",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates. If absent, linear coordinate will be generated.",
                    "role": "data"
                },
                "whiskerwidth": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
                    "max": 1,
                    "role": "style"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "highsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  high .",
                    "role": "info"
                },
                "line": {
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.",
                        "min": 0,
                        "role": "style"
                    },
                    "role": "object"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                }
            }
        },
        "scatter": {
            "meta": {
                "description": "The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts. The data visualized as scatter point or lines is set in `x` and `y`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays."
            },
            "attributes": {
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "info"
                },
                "y0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "role": "info"
                },
                "hovertext": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "hoveron": {
                    "valType": "flaglist",
                    "flags": [
                        "points",
                        "fills"
                    ],
                    "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
                    "role": "info"
                },
                "dx": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "error_x": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "textpositionsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "role": "info"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "customdatasrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  customdata .",
                    "role": "info"
                },
                "textfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "valType": "string",
                        "arrayOk": true,
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the text font.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "line": {
                    "smoothing": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                        "max": 1.3,
                        "role": "style"
                    },
                    "role": "object",
                    "color": {
                        "valType": "color",
                        "description": "Sets the line color.",
                        "role": "style"
                    },
                    "shape": {
                        "valType": "enumerated",
                        "dflt": "linear",
                        "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                        "values": [
                            "linear",
                            "spline",
                            "hv",
                            "vh",
                            "hvh",
                            "vhv"
                        ],
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "simplify": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.",
                        "role": "info"
                    },
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "type": "scatter",
                "idssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  ids .",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "customdata": {
                    "valType": "data_array",
                    "description": "Assigns extra data to each scatter point DOM element",
                    "role": "data"
                },
                "hovertextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hovertext .",
                    "role": "info"
                },
                "dy": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "role": "info"
                },
                "textposition": {
                    "arrayOk": true,
                    "valType": "enumerated",
                    "dflt": "middle center",
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "role": "style"
                },
                "tsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  t .",
                    "role": "info"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "marker": {
                    "maxdisplayed": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                        "role": "style",
                        "min": 0
                    },
                    "sizemode": {
                        "valType": "enumerated",
                        "dflt": "diameter",
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "role": "info"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "sizeref": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "role": "style"
                    },
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "opacitysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "role": "info"
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "opacity": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "sizemin": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "role": "style",
                        "min": 0
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    },
                    "symbol": {
                        "arrayOk": true,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "role": "style"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "role": "object",
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "role": "info"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "role": "object",
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "role": "info"
                        },
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "arrayOk": true,
                            "role": "style",
                            "min": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    },
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    }
                },
                "error_y": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "t": {
                    "valType": "data_array",
                    "description": "For polar chart only.Sets the angular coordinates.",
                    "role": "data"
                },
                "mode": {
                    "valType": "flaglist",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "ids": {
                    "valType": "data_array",
                    "description": "A list of keys for object constancy of data points during animation",
                    "role": "data"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "r": {
                    "valType": "data_array",
                    "description": "For polar chart only.Sets the radial coordinates.",
                    "role": "data"
                },
                "x0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "role": "info"
                },
                "fill": {
                    "valType": "enumerated",
                    "dflt": "none",
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
                    "values": [
                        "none",
                        "tozeroy",
                        "tozerox",
                        "tonexty",
                        "tonextx",
                        "toself",
                        "tonext"
                    ],
                    "role": "style"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "rsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  r .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "mesh3d": {
            "meta": {
                "description": "Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm"
            },
            "attributes": {
                "type": "mesh3d",
                "flatshading": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
                    "role": "style"
                },
                "alphahull": {
                    "valType": "number",
                    "dflt": -1,
                    "description": "Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.",
                    "role": "style"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "isrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  i .",
                    "role": "info"
                },
                "lightposition": {
                    "z": {
                        "min": -100000,
                        "valType": "number",
                        "dflt": 0,
                        "description": "Numeric vector, representing the Z coordinate for each vertex.",
                        "max": 100000,
                        "role": "style"
                    },
                    "y": {
                        "min": -100000,
                        "valType": "number",
                        "dflt": 100000,
                        "description": "Numeric vector, representing the Y coordinate for each vertex.",
                        "max": 100000,
                        "role": "style"
                    },
                    "role": "object",
                    "x": {
                        "min": -100000,
                        "valType": "number",
                        "dflt": 100000,
                        "description": "Numeric vector, representing the X coordinate for each vertex.",
                        "max": 100000,
                        "role": "style"
                    }
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "facecolorsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  facecolor .",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "scene": {
                    "valType": "subplotid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the surface.",
                    "max": 1,
                    "role": "style"
                },
                "intensitysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  intensity .",
                    "role": "info"
                },
                "j": {
                    "valType": "data_array",
                    "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.",
                    "role": "data"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "jsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  j .",
                    "role": "info"
                },
                "vertexcolor": {
                    "valType": "data_array",
                    "description": "Sets the color of each vertex Overrides *color*.",
                    "role": "data"
                },
                "k": {
                    "valType": "data_array",
                    "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.",
                    "role": "data"
                },
                "facecolor": {
                    "valType": "data_array",
                    "description": "Sets the color of each face Overrides *color* and *vertexcolor*.",
                    "role": "data"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "intensity": {
                    "valType": "data_array",
                    "description": "Sets the vertex intensity values, used for plotting fields on meshes",
                    "role": "data"
                },
                "i": {
                    "valType": "data_array",
                    "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.",
                    "role": "data"
                },
                "vertexcolorsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  vertexcolor .",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
                    "role": "data"
                },
                "delaunayaxis": {
                    "valType": "enumerated",
                    "dflt": "z",
                    "description": "Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.",
                    "values": [
                        "x",
                        "y",
                        "z"
                    ],
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "contour": {
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the color of the contour lines.",
                        "role": "style"
                    },
                    "width": {
                        "min": 1,
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the width of the contour lines.",
                        "max": 16,
                        "role": "style"
                    },
                    "show": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not dynamic contours are shown on hover",
                        "role": "info"
                    },
                    "role": "object"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `z` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
                    "role": "data"
                },
                "ksrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  k .",
                    "role": "info"
                },
                "color": {
                    "valType": "color",
                    "description": "Sets the color of the whole mesh",
                    "role": "style"
                },
                "lighting": {
                    "roughness": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                        "max": 1,
                        "role": "style"
                    },
                    "ambient": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.8,
                        "description": "Ambient light increases overall color visibility but can wash out the image.",
                        "max": 1,
                        "role": "style"
                    },
                    "specular": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.05,
                        "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                        "max": 2,
                        "role": "style"
                    },
                    "facenormalsepsilon": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1e-06,
                        "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
                        "max": 1,
                        "role": "style"
                    },
                    "fresnel": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.2,
                        "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                        "max": 5,
                        "role": "style"
                    },
                    "vertexnormalsepsilon": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1e-12,
                        "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
                        "max": 1,
                        "role": "style"
                    },
                    "role": "object",
                    "diffuse": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 0.8,
                        "description": "Represents the extent that incident rays are reflected in a range of angles.",
                        "max": 1,
                        "role": "style"
                    }
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
                    "role": "data"
                }
            }
        },
        "scattercarpet": {
            "meta": {
                "hrName": "scatter_carpet",
                "description": "Plots a scatter trace on either the first carpet axis or the carpet axis with a matching `carpet` attribute."
            },
            "attributes": {
                "type": "scattercarpet",
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c).",
                    "role": "info"
                },
                "sum": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum",
                    "min": 0,
                    "role": "info"
                },
                "b": {
                    "valType": "data_array",
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "hoveron": {
                    "valType": "flaglist",
                    "flags": [
                        "points",
                        "fills"
                    ],
                    "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "a",
                        "b",
                        "c",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "carpet": {
                    "valType": "string",
                    "description": "An identifier for this carpet, so that `scattercarpet` and `scattercontour` traces can specify a carpet plot on which they lie",
                    "role": "info"
                },
                "textposition": {
                    "arrayOk": true,
                    "valType": "enumerated",
                    "dflt": "middle center",
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "role": "style"
                },
                "asrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  a .",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "marker": {
                    "maxdisplayed": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                        "role": "style",
                        "min": 0
                    },
                    "sizemode": {
                        "valType": "enumerated",
                        "dflt": "diameter",
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "role": "info"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "sizeref": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "role": "style"
                    },
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "symbol": {
                        "arrayOk": true,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "role": "style"
                    },
                    "opacitysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "role": "info"
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "opacity": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "sizemin": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "role": "style",
                        "min": 0
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "role": "object",
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `.color` array index, and if set, `.cmin` must be set as well.",
                            "role": "info"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "role": "object",
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `.color` array index, and if set, `.cmax` must be set as well.",
                            "role": "info"
                        },
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the  color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `.cmin` and `.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "arrayOk": true,
                            "role": "style",
                            "min": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    }
                },
                "bsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  b .",
                    "role": "info"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "mode": {
                    "valType": "flaglist",
                    "dflt": "markers",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "role": "info"
                },
                "line": {
                    "smoothing": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                        "max": 1.3,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the line color.",
                        "role": "style"
                    },
                    "shape": {
                        "valType": "enumerated",
                        "dflt": "linear",
                        "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                        "values": [
                            "linear",
                            "spline"
                        ],
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "textpositionsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "role": "info"
                },
                "textfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "valType": "string",
                        "arrayOk": true,
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the text font.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "fill": {
                    "valType": "enumerated",
                    "dflt": "none",
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
                    "values": [
                        "none",
                        "toself",
                        "tonext"
                    ],
                    "role": "style"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "a": {
                    "valType": "data_array",
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "role": "data"
                }
            }
        },
        "contour": {
            "meta": {
                "description": "The data from which contour lines are computed is set in `z`. Data in `z` must be a {2D array} of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to *true*, the above behavior is flipped."
            },
            "attributes": {
                "type": "contour",
                "zauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "text": {
                    "valType": "data_array",
                    "description": "Sets the text elements associated with each z value.",
                    "role": "data"
                },
                "contours": {
                    "start": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the starting contour level value. Must be less than `contours.end`",
                        "role": "style"
                    },
                    "end": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the end contour level value. Must be more than `contours.start`",
                        "role": "style"
                    },
                    "coloring": {
                        "valType": "enumerated",
                        "dflt": "fill",
                        "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                        "values": [
                            "fill",
                            "heatmap",
                            "lines",
                            "none"
                        ],
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the step between each contour level. Must be positive.",
                        "role": "style",
                        "min": 0
                    },
                    "showlines": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.",
                        "role": "style"
                    },
                    "role": "object"
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "zmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "dx": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "role": "info"
                },
                "dy": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "ytype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "autocontour": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
                    "role": "style"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "zmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "ncontours": {
                    "valType": "integer",
                    "dflt": 15,
                    "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
                    "role": "style",
                    "min": 1
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "xtype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "y0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "role": "info"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.",
                    "role": "info"
                },
                "transpose": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data.",
                    "role": "info"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the z data.",
                    "role": "data"
                },
                "x0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "role": "info"
                },
                "line": {
                    "color": {
                        "valType": "color",
                        "description": "Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*.",
                        "role": "style"
                    },
                    "smoothing": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                        "max": 1.3,
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "carpet": {
            "meta": {
                "description": "The data describing carpet axis layout is set in `y` and (optionally) also `x`. If only `y` is present, `x` the plot is interpreted as a cheater plot and is filled in using the `y` values. `x` and `y` may either be 2D arrays matching with each dimension matching that of `a` and `b`, or they may be 1D arrays with total length equal to that of `a` and `b`."
            },
            "attributes": {
                "type": "carpet",
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "b": {
                    "valType": "data_array",
                    "description": "A two dimensional array of y coordinates at each carpet point.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "aaxis": {
                    "startlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the start line.",
                        "role": "style"
                    },
                    "cheatertype": {
                        "valType": "enumerated",
                        "dflt": "value",
                        "values": [
                            "index",
                            "value"
                        ],
                        "role": "info"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "autorange": {
                        "valType": "enumerated",
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "role": "style"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "titleoffset": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "An additional amount by which to offset the title from the tick labels, given in pixels",
                        "role": "info"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "labelprefix": {
                        "valType": "string",
                        "description": "Sets a axis label prefix.",
                        "role": "style"
                    },
                    "categoryorder": {
                        "valType": "enumerated",
                        "dflt": "trace",
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "categoryarraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "role": "info"
                    },
                    "showticklabels": {
                        "valType": "enumerated",
                        "dflt": "start",
                        "description": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.",
                        "values": [
                            "start",
                            "end",
                            "both",
                            "none"
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "arraydtick": {
                        "valType": "integer",
                        "dflt": 1,
                        "description": "The stride between grid lines along the axis",
                        "role": "info",
                        "min": 1
                    },
                    "role": "object",
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "The stride between grid lines along the axis",
                        "role": "info",
                        "min": 0
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "categoryarray": {
                        "valType": "data_array",
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "role": "data"
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "labelpadding": {
                        "valType": "integer",
                        "dflt": 10,
                        "description": "Extra padding between label and the axis",
                        "role": "style"
                    },
                    "minorgridcount": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Sets the number of minor grid ticks per major grid tick",
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "fixedrange": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                        "role": "info"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "type": {
                        "valType": "enumerated",
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "values": [
                            "-",
                            "linear",
                            "date",
                            "category"
                        ],
                        "role": "info"
                    },
                    "labelsuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a axis label suffix.",
                        "role": "style"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "endlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the end line.",
                        "role": "style"
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "The starting index of grid lines along the axis",
                        "role": "info",
                        "min": 0
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "smoothing": {
                        "valType": "number",
                        "dflt": 1,
                        "max": 1.3,
                        "role": "info",
                        "min": 0
                    },
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "any"
                            },
                            {
                                "valType": "any"
                            }
                        ],
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "info"
                    },
                    "rangemode": {
                        "valType": "enumerated",
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "role": "style"
                    },
                    "endlinecolor": {
                        "valType": "color",
                        "description": "Sets the line color of the end line.",
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "startlinecolor": {
                        "valType": "color",
                        "description": "Sets the line color of the start line.",
                        "role": "style"
                    },
                    "minorgridcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "dflt": "array",
                        "values": [
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "minorgridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "arraytick0": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "The starting index of grid lines along the axis",
                        "role": "info",
                        "min": 0
                    },
                    "startline": {
                        "valType": "boolean",
                        "description": "Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.",
                        "role": "style"
                    },
                    "endline": {
                        "valType": "boolean",
                        "description": "Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.",
                        "role": "style"
                    }
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "db": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the b coordinate step. See `b0` for more info.",
                    "role": "info"
                },
                "baxis": {
                    "startlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the start line.",
                        "role": "style"
                    },
                    "cheatertype": {
                        "valType": "enumerated",
                        "dflt": "value",
                        "values": [
                            "index",
                            "value"
                        ],
                        "role": "info"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "autorange": {
                        "valType": "enumerated",
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "role": "style"
                    },
                    "gridcolor": {
                        "valType": "color",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "titleoffset": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "An additional amount by which to offset the title from the tick labels, given in pixels",
                        "role": "info"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "linewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "labelprefix": {
                        "valType": "string",
                        "description": "Sets a axis label prefix.",
                        "role": "style"
                    },
                    "categoryorder": {
                        "valType": "enumerated",
                        "dflt": "trace",
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "categoryarraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "role": "info"
                    },
                    "showticklabels": {
                        "valType": "enumerated",
                        "dflt": "start",
                        "description": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.",
                        "values": [
                            "start",
                            "end",
                            "both",
                            "none"
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this axis' title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "gridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "arraydtick": {
                        "valType": "integer",
                        "dflt": 1,
                        "description": "The stride between grid lines along the axis",
                        "role": "info",
                        "min": 1
                    },
                    "role": "object",
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "The stride between grid lines along the axis",
                        "role": "info",
                        "min": 0
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "categoryarray": {
                        "valType": "data_array",
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "role": "data"
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "showline": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "role": "style"
                    },
                    "labelpadding": {
                        "valType": "integer",
                        "dflt": 10,
                        "description": "Extra padding between label and the axis",
                        "role": "style"
                    },
                    "minorgridcount": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Sets the number of minor grid ticks per major grid tick",
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "role": "style"
                    },
                    "fixedrange": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                        "role": "info"
                    },
                    "showgrid": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "role": "style"
                    },
                    "type": {
                        "valType": "enumerated",
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "values": [
                            "-",
                            "linear",
                            "date",
                            "category"
                        ],
                        "role": "info"
                    },
                    "labelsuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a axis label suffix.",
                        "role": "style"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "endlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the end line.",
                        "role": "style"
                    },
                    "title": {
                        "valType": "string",
                        "description": "Sets the title of this axis.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "The starting index of grid lines along the axis",
                        "role": "info",
                        "min": 0
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "smoothing": {
                        "valType": "number",
                        "dflt": 1,
                        "max": 1.3,
                        "role": "info",
                        "min": 0
                    },
                    "range": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "any"
                            },
                            {
                                "valType": "any"
                            }
                        ],
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "info"
                    },
                    "rangemode": {
                        "valType": "enumerated",
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "role": "style"
                    },
                    "endlinecolor": {
                        "valType": "color",
                        "description": "Sets the line color of the end line.",
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "startlinecolor": {
                        "valType": "color",
                        "description": "Sets the line color of the start line.",
                        "role": "style"
                    },
                    "minorgridcolor": {
                        "valType": "color",
                        "dflt": "#eee",
                        "description": "Sets the color of the grid lines.",
                        "role": "style"
                    },
                    "linecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "dflt": "array",
                        "values": [
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "minorgridwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines.",
                        "role": "style",
                        "min": 0
                    },
                    "arraytick0": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "The starting index of grid lines along the axis",
                        "role": "info",
                        "min": 0
                    },
                    "startline": {
                        "valType": "boolean",
                        "description": "Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.",
                        "role": "style"
                    },
                    "endline": {
                        "valType": "boolean",
                        "description": "Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.",
                        "role": "style"
                    }
                },
                "carpet": {
                    "valType": "string",
                    "description": "An identifier for this carpet, so that `scattercarpet` and `scattercontour` traces can specify a carpet plot on which they lie",
                    "role": "info"
                },
                "asrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  a .",
                    "role": "info"
                },
                "b0": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.",
                    "role": "info"
                },
                "a0": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "da": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the a coordinate step. See `a0` for more info.",
                    "role": "info"
                },
                "font": {
                    "color": {
                        "valType": "color",
                        "dflt": "#444",
                        "role": "style"
                    },
                    "family": {
                        "noBlank": true,
                        "valType": "string",
                        "dflt": "\"Open Sans\", verdana, arial, sans-serif",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "dflt": 12,
                        "min": 1,
                        "role": "style"
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "x": {
                    "valType": "data_array",
                    "description": "A two dimensional array of x coordinates at each carpet point. If ommitted, the plot is a cheater plot and the xaxis is hidden by default.",
                    "role": "data"
                },
                "cheaterslope": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been ommitted.",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "A two dimensional array of y coordinates at each carpet point.",
                    "role": "data"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "color": {
                    "valType": "color",
                    "dflt": "#444",
                    "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                    "role": "style"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "bsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  b .",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "a": {
                    "valType": "data_array",
                    "description": "An array containing values of the first parameter value",
                    "role": "data"
                }
            }
        },
        "bar": {
            "meta": {
                "description": "The data visualized by the span of the bars is set in `y` if `orientation` is set th *v* (the default) and the labels are set in `x`. By setting `orientation` to *h*, the roles are interchanged."
            },
            "layoutAttributes": {
                "bargap": {
                    "valType": "number",
                    "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
                    "max": 1,
                    "role": "style",
                    "min": 0
                },
                "barmode": {
                    "valType": "enumerated",
                    "dflt": "group",
                    "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
                    "values": [
                        "stack",
                        "group",
                        "overlay",
                        "relative"
                    ],
                    "role": "info"
                },
                "barnorm": {
                    "valType": "enumerated",
                    "dflt": "",
                    "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents.",
                    "values": [
                        "",
                        "fraction",
                        "percent"
                    ],
                    "role": "info"
                },
                "bargroupgap": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
                    "max": 1,
                    "role": "style"
                }
            },
            "attributes": {
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "info"
                },
                "widthsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  width .",
                    "role": "info"
                },
                "hovertext": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "orientation": {
                    "valType": "enumerated",
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
                    "values": [
                        "v",
                        "h"
                    ],
                    "role": "info"
                },
                "dx": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "basesrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  base .",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "textpositionsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "role": "info"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "offset": {
                    "valType": "number",
                    "dflt": null,
                    "arrayOk": true,
                    "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
                    "role": "info"
                },
                "insidetextfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "arrayOk": true,
                        "noBlank": true,
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the font used for `text` lying inside the bar.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "textfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "arrayOk": true,
                        "noBlank": true,
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the font used for `text`.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "y0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "role": "info"
                },
                "offsetsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  offset .",
                    "role": "info"
                },
                "type": "bar",
                "_deprecated": {
                    "bardir": {
                        "valType": "enumerated",
                        "description": "Renamed to `orientation`.",
                        "values": [
                            "v",
                            "h"
                        ],
                        "role": "info"
                    }
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "width": {
                    "arrayOk": true,
                    "min": 0,
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the bar width (in position axis units).",
                    "role": "info"
                },
                "hovertextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hovertext .",
                    "role": "info"
                },
                "dy": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "role": "info"
                },
                "textposition": {
                    "arrayOk": true,
                    "valType": "enumerated",
                    "dflt": "none",
                    "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed). *auto* positions `text` inside or outside so that `text` size is maximized.",
                    "values": [
                        "inside",
                        "outside",
                        "auto",
                        "none"
                    ],
                    "role": "info"
                },
                "tsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  t .",
                    "role": "info"
                },
                "error_x": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "marker": {
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "role": "object",
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "role": "info"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "role": "object",
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "role": "info"
                        },
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "width": {
                            "arrayOk": true,
                            "min": 0,
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "role": "style"
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    }
                },
                "error_y": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "outsidetextfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "arrayOk": true,
                        "noBlank": true,
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the font used for `text` lying outside the bar.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "t": {
                    "valType": "data_array",
                    "description": "For polar chart only.Sets the angular coordinates.",
                    "role": "data"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "r": {
                    "valType": "data_array",
                    "description": "For polar chart only.Sets the radial coordinates.",
                    "role": "data"
                },
                "x0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "role": "info"
                },
                "base": {
                    "valType": "any",
                    "dflt": null,
                    "arrayOk": true,
                    "description": "Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "rsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  r .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "ohlc": {
            "meta": {
                "description": "The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red."
            },
            "attributes": {
                "type": "ohlc",
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.",
                    "role": "info"
                },
                "open": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the open values.",
                    "role": "data"
                },
                "lowsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  low .",
                    "role": "info"
                },
                "high": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the high values.",
                    "role": "data"
                },
                "low": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the low values.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "decreasing": {
                    "name": {
                        "valType": "string",
                        "description": "Sets the segment name. The segment name appear as the legend item and on hover.",
                        "role": "info"
                    },
                    "showlegend": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not an item corresponding to this segment is shown in the legend.",
                        "role": "info"
                    },
                    "role": "object",
                    "line": {
                        "color": {
                            "valType": "color",
                            "dflt": "#FF4136",
                            "description": "Sets the line color.",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the line width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "role": "object",
                        "dash": {
                            "valType": "string",
                            "dflt": "solid",
                            "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                            "values": [
                                "solid",
                                "dot",
                                "dash",
                                "longdash",
                                "dashdot",
                                "longdashdot"
                            ],
                            "role": "style"
                        }
                    }
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "increasing": {
                    "name": {
                        "valType": "string",
                        "description": "Sets the segment name. The segment name appear as the legend item and on hover.",
                        "role": "info"
                    },
                    "showlegend": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not an item corresponding to this segment is shown in the legend.",
                        "role": "info"
                    },
                    "role": "object",
                    "line": {
                        "color": {
                            "valType": "color",
                            "dflt": "#3D9970",
                            "description": "Sets the line color.",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "dflt": 2,
                            "description": "Sets the line width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "role": "object",
                        "dash": {
                            "valType": "string",
                            "dflt": "solid",
                            "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                            "values": [
                                "solid",
                                "dot",
                                "dash",
                                "longdash",
                                "dashdot",
                                "longdashdot"
                            ],
                            "role": "style"
                        }
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "close": {
                    "valType": "data_array",
                    "dflt": [],
                    "description": "Sets the close values.",
                    "role": "data"
                },
                "opensrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  open .",
                    "role": "info"
                },
                "closesrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  close .",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates. If absent, linear coordinate will be generated.",
                    "role": "data"
                },
                "highsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  high .",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "tickwidth": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0.3,
                    "description": "Sets the width of the open/close tick marks relative to the *x* minimal interval.",
                    "max": 0.5,
                    "role": "style"
                },
                "line": {
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "[object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                }
            }
        },
        "box": {
            "meta": {
                "description": "In vertical (horizontal) box plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one box per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single box is drawn. That box position is then positioned with with `name` or with `x0` (`y0`) if provided. Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2) is marked by a line inside the box. By default, the whiskers correspond to the box' edges +/- 1.5 times the interquartile range (IQR = Q3-Q1), see *boxpoints* for other options."
            },
            "layoutAttributes": {
                "boxgap": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0.3,
                    "description": "Sets the gap (in plot fraction) between boxes of adjacent location coordinates.",
                    "max": 1,
                    "role": "style"
                },
                "boxmode": {
                    "valType": "enumerated",
                    "dflt": "overlay",
                    "description": "Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes.",
                    "values": [
                        "group",
                        "overlay"
                    ],
                    "role": "info"
                },
                "boxgroupgap": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0.3,
                    "description": "Sets the gap (in plot fraction) between boxes of the same location coordinate.",
                    "max": 1,
                    "role": "style"
                }
            },
            "attributes": {
                "type": "box",
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "boxmean": {
                    "valType": "enumerated",
                    "dflt": false,
                    "description": "If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn.",
                    "values": [
                        true,
                        "sd",
                        false
                    ],
                    "role": "style"
                },
                "pointpos": {
                    "valType": "number",
                    "description": "Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes",
                    "max": 2,
                    "role": "style",
                    "min": -2
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "orientation": {
                    "valType": "enumerated",
                    "description": "Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal).",
                    "values": [
                        "v",
                        "h"
                    ],
                    "role": "style"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "marker": {
                    "symbol": {
                        "arrayOk": false,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "role": "style"
                    },
                    "line": {
                        "color": {
                            "valType": "color",
                            "dflt": "#444",
                            "arrayOk": false,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "outliercolor": {
                            "valType": "color",
                            "description": "Sets the border line color of the outlier sample points. Defaults to marker.color",
                            "role": "style"
                        },
                        "outlierwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the border line width (in px) of the outlier sample points.",
                            "role": "style",
                            "min": 0
                        },
                        "width": {
                            "arrayOk": false,
                            "min": 0,
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "role": "style"
                        },
                        "role": "object"
                    },
                    "size": {
                        "arrayOk": false,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": false,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "outliercolor": {
                        "valType": "color",
                        "dflt": "rgba(0, 0, 0, 0)",
                        "description": "Sets the color of the outlier sample points.",
                        "role": "style"
                    },
                    "opacity": {
                        "arrayOk": false,
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "role": "object"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x sample data or coordinates. See overview for more info.",
                    "role": "data"
                },
                "whiskerwidth": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0.5,
                    "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
                    "max": 1,
                    "role": "style"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "y0": {
                    "valType": "any",
                    "description": "Sets the y coordinate of the box. See overview for more info.",
                    "role": "info"
                },
                "boxpoints": {
                    "valType": "enumerated",
                    "dflt": "outliers",
                    "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points",
                    "values": [
                        "all",
                        "outliers",
                        "suspectedoutliers",
                        false
                    ],
                    "role": "style"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "x0": {
                    "valType": "any",
                    "description": "Sets the x coordinate of the box. See overview for more info.",
                    "role": "info"
                },
                "line": {
                    "color": {
                        "valType": "color",
                        "description": "Sets the color of line bounding the box(es).",
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the width (in px) of line bounding the box(es).",
                        "min": 0,
                        "role": "style"
                    },
                    "role": "object"
                },
                "jitter": {
                    "valType": "number",
                    "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).",
                    "max": 1,
                    "role": "style",
                    "min": 0
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y sample data or coordinates. See overview for more info.",
                    "role": "data"
                }
            }
        },
        "contourcarpet": {
            "meta": {
                "hrName": "contour_carpet",
                "description": "Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis."
            },
            "attributes": {
                "type": "contourcarpet",
                "zauto": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "role": "info"
                },
                "text": {
                    "valType": "data_array",
                    "description": "Sets the text elements associated with each z value.",
                    "role": "data"
                },
                "contours": {
                    "type": {
                        "valType": "enumerated",
                        "dflt": "levels",
                        "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
                        "values": [
                            "levels",
                            "constraint"
                        ],
                        "role": "info"
                    },
                    "end": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the end contour level value. Must be more than `contours.start`",
                        "role": "style"
                    },
                    "operation": {
                        "valType": "enumerated",
                        "dflt": "=",
                        "description": "Sets the filter operation. *=* keeps items equal to `value` *<* keeps items less than `value` *<=* keeps items less than or equal to `value` *>* keeps items greater than `value` *>=* keeps items greater than or equal to `value` *[]* keeps items inside `value[0]` to value[1]` including both bounds` *()* keeps items inside `value[0]` to value[1]` excluding both bounds` *[)* keeps items inside `value[0]` to value[1]` including `value[0]` but excluding `value[1] *(]* keeps items inside `value[0]` to value[1]` excluding `value[0]` but including `value[1] *][* keeps items outside `value[0]` to value[1]` and equal to both bounds` *)(* keeps items outside `value[0]` to value[1]` *](* keeps items outside `value[0]` to value[1]` and equal to `value[0]` *)[* keeps items outside `value[0]` to value[1]` and equal to `value[1]`",
                        "values": [
                            "=",
                            "<",
                            ">=",
                            ">",
                            "<=",
                            "[]",
                            "()",
                            "[)",
                            "(]",
                            "][",
                            ")(",
                            "](",
                            ")[",
                            "{}",
                            "}{"
                        ],
                        "role": "info"
                    },
                    "coloring": {
                        "valType": "enumerated",
                        "dflt": "fill",
                        "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                        "values": [
                            "fill",
                            "lines",
                            "none"
                        ],
                        "role": "style"
                    },
                    "value": {
                        "valType": "any",
                        "dflt": 0,
                        "description": "Sets the value or values by which to filter by. Values are expected to be in the same type as the data linked to *target*. When `operation` is set to one of the inequality values (=,<,>=,>,<=) *value* is expected to be a number or a string. When `operation` is set to one of the interval value ([],(),[),(],][,)(,](,)[) *value* is expected to be 2-item array where the first item is the lower bound and the second item is the upper bound. When `operation`, is set to one of the set value ({},}{) *value* is expected to be an array with as many items as the desired set elements.",
                        "role": "info"
                    },
                    "size": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the step between each contour level. Must be positive.",
                        "role": "style",
                        "min": 0
                    },
                    "start": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Sets the starting contour level value. Must be less than `contours.end`",
                        "role": "style"
                    },
                    "role": "object",
                    "showlines": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.",
                        "role": "style"
                    }
                },
                "showscale": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "role": "info"
                },
                "b": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "zmax": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "reversescale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale.",
                    "role": "style"
                },
                "db": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "carpet": {
                    "valType": "string",
                    "description": "The `carpet` of the carpet axes on which this contour trace lies",
                    "role": "info"
                },
                "asrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  a .",
                    "role": "info"
                },
                "b0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "role": "info"
                },
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "a0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "role": "info"
                },
                "ncontours": {
                    "valType": "integer",
                    "dflt": 15,
                    "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
                    "role": "style",
                    "min": 1
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "autocontour": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
                    "role": "style"
                },
                "autocolorscale": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "role": "style"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "colorbar": {
                    "bordercolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "outlinecolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color.",
                        "role": "style"
                    },
                    "ypad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickfont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets the tick font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "exponentformat": {
                        "valType": "enumerated",
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "role": "style"
                    },
                    "ticktext": {
                        "valType": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                        "role": "data"
                    },
                    "title": {
                        "valType": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar.",
                        "role": "info"
                    },
                    "tick0": {
                        "valType": "any",
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                        "role": "style"
                    },
                    "tickvals": {
                        "valType": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "role": "data"
                    },
                    "tickangle": {
                        "valType": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "role": "style"
                    },
                    "xanchor": {
                        "valType": "enumerated",
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "role": "style"
                    },
                    "outlinewidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line.",
                        "role": "style",
                        "min": 0
                    },
                    "titleside": {
                        "valType": "enumerated",
                        "dflt": "top",
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "tickvalssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "role": "info"
                    },
                    "ticklen": {
                        "valType": "number",
                        "dflt": 5,
                        "description": "Sets the tick length (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "showticklabels": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn.",
                        "role": "style"
                    },
                    "ticks": {
                        "valType": "enumerated",
                        "dflt": "",
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "role": "style"
                    },
                    "titlefont": {
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "description": "Sets this color bar's title font.",
                        "family": {
                            "valType": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "strict": true,
                            "noBlank": true,
                            "role": "style"
                        },
                        "role": "object",
                        "size": {
                            "valType": "number",
                            "min": 1,
                            "role": "style"
                        }
                    },
                    "xpad": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "role": "style"
                    },
                    "thicknessmode": {
                        "valType": "enumerated",
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "style"
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "role": "style"
                    },
                    "x": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "lenmode": {
                        "valType": "enumerated",
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "role": "info"
                    },
                    "borderwidth": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "role": "style"
                    },
                    "tickprefix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix.",
                        "role": "style"
                    },
                    "showtickprefix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "dtick": {
                        "valType": "any",
                        "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                        "role": "style"
                    },
                    "ticksuffix": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix.",
                        "role": "style"
                    },
                    "role": "object",
                    "len": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "role": "style",
                        "min": 0
                    },
                    "tickwidth": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the tick width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "tickcolor": {
                        "valType": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color.",
                        "role": "style"
                    },
                    "showticksuffix": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    },
                    "tickmode": {
                        "valType": "enumerated",
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "role": "info"
                    },
                    "tickformat": {
                        "valType": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                        "role": "style"
                    },
                    "separatethousands": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "If \"true\", even 4-digit integers are separated",
                        "role": "style"
                    },
                    "bgcolor": {
                        "valType": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area.",
                        "role": "style"
                    },
                    "nticks": {
                        "valType": "integer",
                        "dflt": 0,
                        "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                        "role": "style",
                        "min": 0
                    },
                    "y": {
                        "min": -2,
                        "valType": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "max": 3,
                        "role": "style"
                    },
                    "yanchor": {
                        "valType": "enumerated",
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "role": "style"
                    },
                    "showexponent": {
                        "valType": "enumerated",
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "role": "style"
                    }
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "zmin": {
                    "valType": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain.",
                    "role": "info"
                },
                "da": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "mode": {
                    "valType": "flaglist",
                    "flags": [
                        "lines",
                        "fill"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "The mode.",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.",
                    "role": "info"
                },
                "transpose": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data.",
                    "role": "info"
                },
                "colorscale": {
                    "valType": "colorscale",
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "role": "style"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the z data.",
                    "role": "data"
                },
                "line": {
                    "color": {
                        "valType": "color",
                        "description": "Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*.",
                        "role": "style"
                    },
                    "smoothing": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 1,
                        "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                        "max": 1.3,
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "string",
                        "dflt": "solid",
                        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "atype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "btype": {
                    "valType": "enumerated",
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "role": "info"
                },
                "bsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  b .",
                    "role": "info"
                },
                "a": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                }
            }
        },
        "scatter3d": {
            "meta": {
                "hrName": "scatter_3d",
                "description": "The data visualized as scatter point or lines in 3D dimension is set in `x`, `y`, `z`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` Projections are achieved via `projection`. Surface fills are achieved via `surfaceaxis`."
            },
            "attributes": {
                "type": "scatter3d",
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "info"
                },
                "surfaceaxis": {
                    "valType": "enumerated",
                    "dflt": -1,
                    "description": "If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively.",
                    "values": [
                        -1,
                        0,
                        1,
                        2
                    ],
                    "role": "info"
                },
                "projection": {
                    "z": {
                        "opacity": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the projection color.",
                            "max": 1,
                            "role": "style"
                        },
                        "role": "object",
                        "show": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not projections are shown along the z axis.",
                            "role": "info"
                        },
                        "scale": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 0.6666666666666666,
                            "description": "Sets the scale factor determining the size of the projection marker points.",
                            "max": 10,
                            "role": "style"
                        }
                    },
                    "y": {
                        "opacity": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the projection color.",
                            "max": 1,
                            "role": "style"
                        },
                        "role": "object",
                        "show": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not projections are shown along the y axis.",
                            "role": "info"
                        },
                        "scale": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 0.6666666666666666,
                            "description": "Sets the scale factor determining the size of the projection marker points.",
                            "max": 10,
                            "role": "style"
                        }
                    },
                    "role": "object",
                    "x": {
                        "opacity": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the projection color.",
                            "max": 1,
                            "role": "style"
                        },
                        "role": "object",
                        "show": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not projections are shown along the x axis.",
                            "role": "info"
                        },
                        "scale": {
                            "min": 0,
                            "valType": "number",
                            "dflt": 0.6666666666666666,
                            "description": "Sets the scale factor determining the size of the projection marker points.",
                            "max": 10,
                            "role": "style"
                        }
                    }
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "scene": {
                    "valType": "subplotid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
                    "role": "info"
                },
                "hovertextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hovertext .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "textposition": {
                    "arrayOk": true,
                    "valType": "enumerated",
                    "dflt": "top center",
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "role": "style"
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "error_x": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "surfacecolor": {
                    "valType": "color",
                    "description": "Sets the surface fill color.",
                    "role": "style"
                },
                "marker": {
                    "sizemode": {
                        "valType": "enumerated",
                        "dflt": "diameter",
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "role": "info"
                    },
                    "sizemin": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "role": "style",
                        "min": 0
                    },
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 8,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "sizeref": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "role": "style"
                    },
                    "role": "object",
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "symbol": {
                        "arrayOk": true,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type.",
                        "values": [
                            "circle",
                            "circle-open",
                            "square",
                            "square-open",
                            "diamond",
                            "diamond-open",
                            "cross",
                            "x"
                        ],
                        "role": "style"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "role": "info"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "role": "object",
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "role": "info"
                        },
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "arrayOk": false,
                            "role": "style",
                            "min": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    },
                    "opacity": {
                        "arrayOk": false,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set *marker.color* to an rgba color and use its alpha channel.",
                        "max": 1,
                        "role": "style"
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "zsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  z .",
                    "role": "info"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "hovertext": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "mode": {
                    "valType": "flaglist",
                    "dflt": "lines+markers",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "role": "info"
                },
                "error_z": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "error_y": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "zcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `z` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "z": {
                    "valType": "data_array",
                    "description": "Sets the z coordinates.",
                    "role": "data"
                },
                "textfont": {
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "familysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  family .",
                        "role": "info"
                    },
                    "family": {
                        "valType": "string",
                        "arrayOk": true,
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "size": {
                        "valType": "number",
                        "arrayOk": true,
                        "min": 1,
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "role": "style"
                    },
                    "description": "Sets the text font.",
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "textpositionsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "role": "info"
                },
                "line": {
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "enumerated",
                        "dflt": "solid",
                        "description": "Sets the dash style of the lines.",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `line.color` array index, and if set, `line.cmin` must be set as well.",
                        "role": "info"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `line.color` array index, and if set, `line.cmax` must be set as well.",
                        "role": "info"
                    },
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    }
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "scattergl": {
            "meta": {
                "description": "The data visualized as scatter point or lines is set in `x` and `y` using the WebGl plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays."
            },
            "attributes": {
                "type": "scattergl",
                "xaxis": {
                    "valType": "subplotid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "text": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
                    "role": "info"
                },
                "line": {
                    "color": {
                        "valType": "color",
                        "description": "Sets the line color.",
                        "role": "style"
                    },
                    "width": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the line width (in px).",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "dash": {
                        "valType": "enumerated",
                        "dflt": "solid",
                        "description": "Sets the style of the lines.",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "role": "style"
                    }
                },
                "ycalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `y` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "dx": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "role": "info"
                },
                "dy": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "error_x": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "fillcolor": {
                    "valType": "color",
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "role": "style"
                },
                "marker": {
                    "sizemode": {
                        "valType": "enumerated",
                        "dflt": "diameter",
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "role": "info"
                    },
                    "sizemin": {
                        "valType": "number",
                        "dflt": 0,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "role": "style",
                        "min": 0
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "opacitysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "role": "info"
                    },
                    "showscale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "role": "info"
                    },
                    "cmin": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "role": "info"
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "sizeref": {
                        "valType": "number",
                        "dflt": 1,
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "role": "style"
                    },
                    "role": "object",
                    "reversescale": {
                        "valType": "boolean",
                        "dflt": false,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                        "role": "style"
                    },
                    "symbol": {
                        "arrayOk": true,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type.",
                        "values": [
                            "circle",
                            "circle-open",
                            "square",
                            "square-open",
                            "diamond",
                            "diamond-open",
                            "cross",
                            "x"
                        ],
                        "role": "style"
                    },
                    "cmax": {
                        "valType": "number",
                        "dflt": null,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "role": "info"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "colorbar": {
                        "bordercolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "outlinecolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color.",
                            "role": "style"
                        },
                        "ypad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickfont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets the tick font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "exponentformat": {
                            "valType": "enumerated",
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "role": "style"
                        },
                        "ticktext": {
                            "valType": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                            "role": "data"
                        },
                        "title": {
                            "valType": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar.",
                            "role": "info"
                        },
                        "tick0": {
                            "valType": "any",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
                            "role": "style"
                        },
                        "tickvals": {
                            "valType": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "role": "data"
                        },
                        "tickangle": {
                            "valType": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "role": "style"
                        },
                        "xanchor": {
                            "valType": "enumerated",
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "role": "style"
                        },
                        "outlinewidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line.",
                            "role": "style",
                            "min": 0
                        },
                        "titleside": {
                            "valType": "enumerated",
                            "dflt": "top",
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "tickvalssrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "role": "info"
                        },
                        "ticktextsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "role": "info"
                        },
                        "ticklen": {
                            "valType": "number",
                            "dflt": 5,
                            "description": "Sets the tick length (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "showticklabels": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn.",
                            "role": "style"
                        },
                        "ticks": {
                            "valType": "enumerated",
                            "dflt": "",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "role": "style"
                        },
                        "titlefont": {
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "description": "Sets this color bar's title font.",
                            "family": {
                                "valType": "string",
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "strict": true,
                                "noBlank": true,
                                "role": "style"
                            },
                            "role": "object",
                            "size": {
                                "valType": "number",
                                "min": 1,
                                "role": "style"
                            }
                        },
                        "xpad": {
                            "valType": "number",
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "role": "style"
                        },
                        "thicknessmode": {
                            "valType": "enumerated",
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "style"
                        },
                        "thickness": {
                            "valType": "number",
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "role": "style"
                        },
                        "x": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "lenmode": {
                            "valType": "enumerated",
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "role": "info"
                        },
                        "borderwidth": {
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "role": "style"
                        },
                        "tickprefix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix.",
                            "role": "style"
                        },
                        "showtickprefix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "dtick": {
                            "valType": "any",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
                            "role": "style"
                        },
                        "ticksuffix": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix.",
                            "role": "style"
                        },
                        "role": "object",
                        "len": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "role": "style",
                            "min": 0
                        },
                        "tickwidth": {
                            "valType": "number",
                            "dflt": 1,
                            "description": "Sets the tick width (in px).",
                            "role": "style",
                            "min": 0
                        },
                        "tickcolor": {
                            "valType": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color.",
                            "role": "style"
                        },
                        "showticksuffix": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        },
                        "tickmode": {
                            "valType": "enumerated",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "role": "info"
                        },
                        "tickformat": {
                            "valType": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "role": "style"
                        },
                        "separatethousands": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "If \"true\", even 4-digit integers are separated",
                            "role": "style"
                        },
                        "bgcolor": {
                            "valType": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area.",
                            "role": "style"
                        },
                        "nticks": {
                            "valType": "integer",
                            "dflt": 0,
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "role": "style",
                            "min": 0
                        },
                        "y": {
                            "min": -2,
                            "valType": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "max": 3,
                            "role": "style"
                        },
                        "yanchor": {
                            "valType": "enumerated",
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "role": "style"
                        },
                        "showexponent": {
                            "valType": "enumerated",
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "role": "style"
                        }
                    },
                    "line": {
                        "cmax": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "role": "info"
                        },
                        "cauto": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                            "role": "info"
                        },
                        "reversescale": {
                            "valType": "boolean",
                            "dflt": false,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).",
                            "role": "style"
                        },
                        "role": "object",
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        },
                        "color": {
                            "valType": "color",
                            "arrayOk": true,
                            "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "role": "style"
                        },
                        "autocolorscale": {
                            "valType": "boolean",
                            "dflt": true,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "role": "style"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "colorscale": {
                            "valType": "colorscale",
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                            "role": "style"
                        },
                        "width": {
                            "valType": "number",
                            "arrayOk": true,
                            "role": "style",
                            "min": 0,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        },
                        "cmin": {
                            "valType": "number",
                            "dflt": null,
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "role": "info"
                        }
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "colorscale": {
                        "valType": "colorscale",
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis",
                        "role": "style"
                    },
                    "opacity": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "cauto": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.",
                        "role": "info"
                    },
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    },
                    "autocolorscale": {
                        "valType": "boolean",
                        "dflt": true,
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                        "role": "style"
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "yaxis": {
                    "valType": "subplotid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "error_y": {
                    "type": {
                        "valType": "enumerated",
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "role": "info"
                    },
                    "array": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "valType": "number",
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "role": "style"
                        }
                    },
                    "thickness": {
                        "valType": "number",
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "visible": {
                        "valType": "boolean",
                        "description": "Determines whether or not this set of error bars is visible.",
                        "role": "info"
                    },
                    "traceref": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "arrayminussrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "role": "info"
                    },
                    "arrayminus": {
                        "valType": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "role": "data"
                    },
                    "width": {
                        "valType": "number",
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "role": "style",
                        "min": 0
                    },
                    "symmetric": {
                        "valType": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "role": "info"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "arraysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  array .",
                        "role": "info"
                    },
                    "role": "object",
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tracerefminus": {
                        "valType": "integer",
                        "dflt": 0,
                        "role": "info",
                        "min": 0
                    },
                    "color": {
                        "valType": "color",
                        "description": "Sets the stoke color of the error bars.",
                        "role": "style"
                    },
                    "valueminus": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "role": "info",
                        "min": 0
                    },
                    "value": {
                        "valType": "number",
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "role": "info",
                        "min": 0
                    }
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "x": {
                    "valType": "data_array",
                    "description": "Sets the x coordinates.",
                    "role": "data"
                },
                "mode": {
                    "valType": "flaglist",
                    "flags": [
                        "lines",
                        "markers"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace.",
                    "role": "info"
                },
                "y0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "role": "info"
                },
                "connectgaps": {
                    "valType": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "role": "info"
                },
                "xcalendar": {
                    "valType": "enumerated",
                    "dflt": "gregorian",
                    "description": "Sets the calendar system to use with `x` date data.",
                    "values": [
                        "gregorian",
                        "chinese",
                        "coptic",
                        "discworld",
                        "ethiopian",
                        "hebrew",
                        "islamic",
                        "julian",
                        "mayan",
                        "nanakshahi",
                        "nepali",
                        "persian",
                        "jalali",
                        "taiwan",
                        "thai",
                        "ummalqura"
                    ],
                    "role": "info"
                },
                "ysrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  y .",
                    "role": "info"
                },
                "x0": {
                    "valType": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "role": "info"
                },
                "fill": {
                    "valType": "enumerated",
                    "dflt": "none",
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
                    "values": [
                        "none",
                        "tozeroy",
                        "tozerox"
                    ],
                    "role": "style"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "xsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  x .",
                    "role": "info"
                },
                "y": {
                    "valType": "data_array",
                    "description": "Sets the y coordinates.",
                    "role": "data"
                }
            }
        },
        "area": {
            "meta": {},
            "attributes": {
                "type": "area",
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "t": {
                    "valType": "data_array",
                    "description": "For polar chart only.Sets the angular coordinates.",
                    "role": "data"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "r": {
                    "valType": "data_array",
                    "description": "For polar chart only.Sets the radial coordinates.",
                    "role": "data"
                },
                "tsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  t .",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                },
                "rsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  r .",
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "marker": {
                    "symbol": {
                        "arrayOk": true,
                        "valType": "enumerated",
                        "dflt": "circle",
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "role": "style"
                    },
                    "symbolsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "role": "info"
                    },
                    "sizesrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  size .",
                        "role": "info"
                    },
                    "opacitysrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "role": "info"
                    },
                    "size": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "dflt": 6,
                        "description": "Sets the marker size (in px).",
                        "role": "style"
                    },
                    "color": {
                        "valType": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "role": "style"
                    },
                    "opacity": {
                        "arrayOk": true,
                        "min": 0,
                        "valType": "number",
                        "description": "Sets the marker opacity.",
                        "max": 1,
                        "role": "style"
                    },
                    "role": "object",
                    "colorsrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  color .",
                        "role": "info"
                    }
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                }
            }
        },
        "pie": {
            "meta": {
                "description": "A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors`"
            },
            "layoutAttributes": {
                "hiddenlabelssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hiddenlabels .",
                    "role": "info"
                },
                "hiddenlabels": {
                    "valType": "data_array",
                    "role": "data"
                }
            },
            "attributes": {
                "type": "pie",
                "domain": {
                    "y": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the vertical domain of this pie trace (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    },
                    "role": "object",
                    "x": {
                        "valType": "info_array",
                        "items": [
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            },
                            {
                                "valType": "number",
                                "max": 1,
                                "min": 0
                            }
                        ],
                        "description": "Sets the horizontal domain of this pie trace (in plot fraction).",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ]
                    }
                },
                "text": {
                    "valType": "data_array",
                    "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
                    "role": "data"
                },
                "hovertext": {
                    "valType": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
                    "role": "info"
                },
                "pull": {
                    "arrayOk": true,
                    "min": 0,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.",
                    "max": 1,
                    "role": "style"
                },
                "hole": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.",
                    "max": 1,
                    "role": "style"
                },
                "showlegend": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "role": "info"
                },
                "labels": {
                    "valType": "data_array",
                    "description": "Sets the sector labels.",
                    "role": "data"
                },
                "legendgroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "role": "info"
                },
                "textinfo": {
                    "valType": "flaglist",
                    "flags": [
                        "label",
                        "text",
                        "value",
                        "percent"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines which trace information appear on the graph.",
                    "role": "info"
                },
                "hovertextsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  hovertext .",
                    "role": "info"
                },
                "hoverinfo": {
                    "valType": "flaglist",
                    "dflt": "all",
                    "flags": [
                        "label",
                        "text",
                        "value",
                        "percent",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none",
                        "skip"
                    ],
                    "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                    "role": "info"
                },
                "direction": {
                    "valType": "enumerated",
                    "dflt": "counterclockwise",
                    "description": "Specifies the direction at which succeeding sectors follow one another.",
                    "values": [
                        "clockwise",
                        "counterclockwise"
                    ],
                    "role": "style"
                },
                "textposition": {
                    "arrayOk": true,
                    "valType": "enumerated",
                    "dflt": "auto",
                    "description": "Specifies the location of the `textinfo`.",
                    "values": [
                        "inside",
                        "outside",
                        "auto",
                        "none"
                    ],
                    "role": "info"
                },
                "labelssrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  labels .",
                    "role": "info"
                },
                "valuessrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  values .",
                    "role": "info"
                },
                "uid": {
                    "valType": "string",
                    "dflt": "",
                    "role": "info"
                },
                "marker": {
                    "colors": {
                        "valType": "data_array",
                        "description": "Sets the color of each sector of this pie chart. If not specified, the default trace color set is used to pick the sector colors.",
                        "role": "data"
                    },
                    "role": "object",
                    "line": {
                        "color": {
                            "valType": "color",
                            "dflt": "#444",
                            "arrayOk": true,
                            "description": "Sets the color of the line enclosing each sector.",
                            "role": "style"
                        },
                        "widthsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  width .",
                            "role": "info"
                        },
                        "width": {
                            "arrayOk": true,
                            "min": 0,
                            "valType": "number",
                            "dflt": 0,
                            "description": "Sets the width (in px) of the line enclosing each sector.",
                            "role": "style"
                        },
                        "role": "object",
                        "colorsrc": {
                            "valType": "string",
                            "description": "Sets the source reference on plot.ly for  color .",
                            "role": "info"
                        }
                    },
                    "colorssrc": {
                        "valType": "string",
                        "description": "Sets the source reference on plot.ly for  colors .",
                        "role": "info"
                    }
                },
                "outsidetextfont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets the font used for `textinfo` lying outside the pie.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "scalegroup": {
                    "valType": "string",
                    "dflt": "",
                    "description": "If there are multiple pies that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
                    "role": "info"
                },
                "pullsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  pull .",
                    "role": "info"
                },
                "textsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  text .",
                    "role": "info"
                },
                "label0": {
                    "valType": "number",
                    "dflt": 0,
                    "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.",
                    "role": "info"
                },
                "insidetextfont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets the font used for `textinfo` lying inside the pie.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "visible": {
                    "valType": "enumerated",
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "role": "info"
                },
                "opacity": {
                    "min": 0,
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the opacity of the trace.",
                    "max": 1,
                    "role": "style"
                },
                "stream": {
                    "maxpoints": {
                        "min": 0,
                        "valType": "number",
                        "dflt": 500,
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "max": 10000,
                        "role": "info"
                    },
                    "token": {
                        "valType": "string",
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "strict": true,
                        "noBlank": true,
                        "role": "info"
                    },
                    "role": "object"
                },
                "values": {
                    "valType": "data_array",
                    "description": "Sets the values of the sectors of this pie chart.",
                    "role": "data"
                },
                "textpositionsrc": {
                    "valType": "string",
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "role": "info"
                },
                "sort": {
                    "valType": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the sectors are reordered from largest to smallest.",
                    "role": "style"
                },
                "rotation": {
                    "min": -360,
                    "valType": "number",
                    "dflt": 0,
                    "description": "Instead of the first slice starting at 12 o'clock, rotate to some other angle.",
                    "max": 360,
                    "role": "style"
                },
                "textfont": {
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "description": "Sets the font used for `textinfo`.",
                    "family": {
                        "valType": "string",
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "strict": true,
                        "noBlank": true,
                        "role": "style"
                    },
                    "role": "object",
                    "size": {
                        "valType": "number",
                        "min": 1,
                        "role": "style"
                    }
                },
                "dlabel": {
                    "valType": "number",
                    "dflt": 1,
                    "description": "Sets the label step. See `label0` for more info.",
                    "role": "info"
                },
                "name": {
                    "valType": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "role": "info"
                }
            }
        }
    },
    "defs": {
        "valObjects": {
            "number": {
                "requiredOpts": [],
                "description": "A number or a numeric value (e.g. a number inside a string). When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
                "otherOpts": [
                    "dflt",
                    "min",
                    "max",
                    "arrayOk"
                ]
            },
            "flaglist": {
                "requiredOpts": [
                    "flags"
                ],
                "description": "A string representing a combination of flags (order does not matter here). Combine any of the available `flags` with *+*. (e.g. ('lines+markers')). Values in `extras` cannot be combined.",
                "otherOpts": [
                    "dflt",
                    "extras"
                ]
            },
            "boolean": {
                "requiredOpts": [],
                "description": "A boolean (true/false) value.",
                "otherOpts": [
                    "dflt"
                ]
            },
            "any": {
                "requiredOpts": [],
                "description": "Any type.",
                "otherOpts": [
                    "dflt",
                    "values",
                    "arrayOk"
                ]
            },
            "info_array": {
                "requiredOpts": [
                    "items"
                ],
                "description": "An {array} of plot information.",
                "otherOpts": [
                    "dflt",
                    "freeLength"
                ]
            },
            "string": {
                "requiredOpts": [],
                "description": "A string value. Numbers are converted to strings except for attributes with `strict` set to true.",
                "otherOpts": [
                    "dflt",
                    "noBlank",
                    "strict",
                    "arrayOk",
                    "values"
                ]
            },
            "enumerated": {
                "requiredOpts": [
                    "values"
                ],
                "description": "Enumerated value type. The available values are listed in `values`.",
                "otherOpts": [
                    "dflt",
                    "coerceNumber",
                    "arrayOk"
                ]
            },
            "integer": {
                "requiredOpts": [],
                "description": "An integer or an integer inside a string. When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
                "otherOpts": [
                    "dflt",
                    "min",
                    "max"
                ]
            },
            "data_array": {
                "requiredOpts": [],
                "description": "An {array} of data. The value MUST be an {array}, or we ignore it.",
                "otherOpts": [
                    "dflt"
                ]
            },
            "color": {
                "requiredOpts": [],
                "description": "A string describing color. Supported formats: - hex (e.g. '#d3d3d3') - rgb (e.g. 'rgb(255, 0, 0)') - rgba (e.g. 'rgb(255, 0, 0, 0.5)') - hsl (e.g. 'hsl(0, 100%, 50%)') - hsv (e.g. 'hsv(0, 100%, 100%)') - named colors (full list: http://www.w3.org/TR/css3-color/#svg-color)",
                "otherOpts": [
                    "dflt",
                    "arrayOk"
                ]
            },
            "subplotid": {
                "requiredOpts": [
                    "dflt"
                ],
                "description": "An id string of a subplot type (given by dflt), optionally followed by an integer >1. e.g. if dflt='geo', we can have 'geo', 'geo2', 'geo3', ...",
                "otherOpts": []
            },
            "angle": {
                "requiredOpts": [],
                "description": "A number (in degree) between -180 and 180.",
                "otherOpts": [
                    "dflt"
                ]
            },
            "colorscale": {
                "requiredOpts": [],
                "description": "A Plotly colorscale either picked by a name: (any of Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis ) customized as an {array} of 2-element {arrays} where the first element is the normalized color level value (starting at *0* and ending at *1*), and the second item is a valid color string.",
                "otherOpts": [
                    "dflt"
                ]
            }
        },
        "metaKeys": [
            "_isSubplotObj",
            "_isLinkedToArray",
            "_arrayAttrRegexps",
            "_deprecated",
            "description",
            "role"
        ]
    }
}